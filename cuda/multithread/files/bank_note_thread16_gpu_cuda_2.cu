float h_A[]= {
0.9082878423605707, 0.689461402011782, 0.5463360405647449, 0.505607877073731, 0.7714555565241021, 0.7929819094507726, 0.6788033919030121, 0.5687240568421572, 0.8389623664839443, 0.634043583652253, 0.9457857509154202, 0.7519147147958488, 0.9843117506047065, 0.9676874072673204, 0.798158570093222, 0.9318072733451459, 0.7439244467681311, 0.9593856458178559, 0.5373705836989602, 0.6402254105908144, 0.7372196215076794, 0.6082568212678618, 0.6979426932104127, 0.7283842025429055, 0.9584905996605753, 0.5195155554982327, 0.975419587161416, 0.8096049813459658, 0.8383877189642344, 0.815163207043546, 0.9962296424815029, 0.8257100526244328, 0.7458081348791421, 0.8030882184553869, 0.5967364634067177, 0.9303342059438153, 0.7517915734760934, 0.8618913509260577, 0.6526211302888955, 0.8740412379001925, 0.9313006338700538, 0.9699971646917169, 0.8654325496479509, 0.6484988032489198, 0.9012295545964255, 0.8404307733332576, 0.5724524195941496, 0.7504545061224357, 0.9800762559127139, 0.6702715507227748, 0.9171044139131168, 0.7822184970721757, 0.8122396737793942, 0.7738198950889448, 0.7995687552098456, 0.998014937760773, 0.6557444679341392, 0.9737466545929512, 0.8573762861913232, 0.7235132768856634, 0.819484714941106, 0.5028266081567522, 0.6443833537471696, 0.7438185172172388, 0.6676246406348593, 0.5785496889988642, 0.9663132118586415, 0.9799734728777658, 0.7347309272468305, 0.5012577124571183, 0.7480357094701159, 0.83065157071153, 0.5495105239440944, 0.7742378113848907, 0.5297156277290647, 0.8405015409194474, 0.9870850031095237, 0.7183063739998541, 0.7003071457566671, 0.5878437627980221, 0.8382888149934464, 0.8263031847594484, 0.5501921078972174, 0.638697356392512, 0.6710087556650692, 0.9666158068402364, 0.566651830047104, 0.6899588664208733, 0.6460717393412477, 0.7291311807530819, 0.7224906851104436, 0.9844710627243523, 0.5086825869074691, 0.7090734870987312, 0.8297137648073487, 0.5500526905376764, 0.7123279180391103, 0.9305503256742669, 0.5488463249341886, 0.6092389446505548, 0.8643744864371559, 0.8549461149920099, 0.560488164313971, 0.6595018767619195, 0.6010501134011093, 0.9468472372814916, 0.9731044885171675, 0.8958118139219222, 0.9497959839954313, 0.5525867013495501, 0.5680263727795365, 0.6876072324079898, 0.7762832990785185, 0.8642705608498813, 0.5298976451365529, 0.605447857535641, 0.9948505555852337, 0.7781071765988862, 0.5203101401015189, 0.5471855442069545, 0.9303722262905725, 0.8487271068794108, 0.5089992288929608, 0.5699395327114334, 0.605145739718695, 0.6678086186557685, 0.6884732870439316, 0.9617180925598288, 0.7279632945162432, 0.6127210742184934, 0.7815049978335249, 0.7868464525148042, 0.8765095786499839, 0.664500504370235, 0.8577437865710569, 0.6532079349161648, 0.6534916056466487, 0.7171843587449118, 0.7621912793732784, 0.572076745492104, 0.7977747209929116, 0.7647082383559652, 0.9478102769183364, 0.9772570941244937, 0.8131091269744608, 0.6436331232327142, 0.7965748232282563, 0.6577843752933865, 0.7746790823670306, 0.9370317427408532, 0.7948643667715087, 0.7477002468282741, 0.8243730847671513, 0.5974622938077707, 0.8372200656105012, 0.6555293608299542, 0.8409164608668007, 0.9839838532225667, 0.7332559960252518, 0.9291392931291063, 0.9456571252968435, 0.7932413357679133, 0.693810632981536, 0.5198212506522079, 0.6076737470680571, 0.9259256031842424, 0.6968259351426311, 0.7224277792094516, 0.675160024153632, 0.5253118336028796, 0.7379302818186566, 0.9634115033012517, 0.6187461977387153, 0.5075698238411877, 0.8304608266281814, 0.9680937184172465, 0.9216584474114582, 0.577102163584859, 0.9444654772619816, 0.6542510822903571, 0.9420931373052908, 0.7649540465762221, 0.7391290580199563, 0.7798337612716988, 0.5577399167495917, 0.5733736445912001, 0.8672435721086805, 0.6550718957452499, 0.7343787791913701, 0.8286090363881562, 0.9874391614319419, 0.6317174927286415, 0.9991818265547765, 0.8882882165082715, 0.7865034733678209, 0.9754850091083322, 0.7883052334448991, 0.6053331540391218, 0.7381300336993806, 0.5614202557288888, 0.6055179557374848, 0.8551360852576411, 0.8664296368013171, 0.5669369122418195, 0.8612613902124622, 0.9308738987091685, 0.7082305956767609, 0.9059876316512645, 0.7141225708042331, 0.5983977032912194, 0.832108200624676, 0.7102909332116345, 0.8701113270819587, 0.6172341761198135, 0.5499460005149649, 0.8217479675970876, 0.980397487524319, 0.7339616077701528, 0.8944438943149617, 0.8824476610480294, 0.9448839365945957, 0.611293609696064, 0.6202127155281614, 0.8982133628146343, 0.9959880857911522, 0.7749987208553435, 0.8404221536619295, 0.5355160001825691, 0.8312896242843753, 0.6710963564461283, 0.6757778649882356, 0.9450591609527955, 0.7960770326073398, 0.7388337694250741, 0.5097990426205785, 0.617665105190204, 0.6491148352416893, 0.6680035091881055, 0.915146896528442, 0.8526611525364447, 0.8433234599750767, 0.779861781124638, 0.7587100807600625, 0.7084898047926786, 0.7109206823340974, 0.7914737203988049, 0.8327485312652257, 0.8994487364271566, 0.9435130477429098, 0.7943053647334768, 0.6493790432720916, 0.5780312623722645, 0.8959978348428679, 0.6784904510102145, 0.9396971164367234, 0.7492180506543771, 0.8131125420733959, 0.521781354983252, 0.9750428789018397, 0.7310365674974546, 0.5993537952006589, 0.8726455896068224, 0.7819331738029656, 0.6421887465079975, 0.6674999451602143, 0.5319971037910738, 0.852022593506808, 0.5446034241601883, 0.9504448229552447, 0.8207629928044318, 0.9422319176831089, 0.9158816268975133, 0.9259598936146547, 0.8107352797786818, 0.5128802465392901, 0.5569836938081356, 0.7710003412286411, 0.6807902564653832, 0.8074504373673679, 0.8605365138324785, 0.7205481352043726, 0.7071270841127113, 0.9789630898384751, 0.572000247690236, 0.9236598670633295, 0.7289016881238359, 0.6503267593640145, 0.7248816820644711, 0.9813099299336776, 0.5250299309234707, 0.5926874889658209, 0.848866338628683, 0.9537216699727843, 0.7506749287998197, 0.7870097033219563, 0.6370012865666241, 0.6911264063172331, 0.6461537466213743, 0.5472501634129935, 0.9706748703009256, 0.9750735726021467, 0.833838398315583, 0.7870068246408313, 0.5672666412997371, 0.7621597478957183, 0.6412523950240999, 0.9533626172329719, 0.9285077025186779, 0.9085561584524972, 0.9797735405031338, 0.6527782031717836, 0.7764494743905886, 0.7340597144688839, 0.6371944941542568, 0.9303288261846399, 0.7909196434669774, 0.6101772670989659, 0.8725237343461679, 0.7771588858663292, 0.8031843697809086, 0.7166049073677778, 0.8440435183372049, 0.6231208790809557, 0.6824566738446276, 0.6249253706778888, 0.6001319052590866, 0.8423979278754339, 0.9804912799166953, 0.533352790625, 0.9955194247841975, 0.8562691265351794, 0.7159805159468932, 0.848377286181451, 0.6874202044851473, 0.5296038989284669, 0.8881984978738485, 0.6128150491015979, 0.9118226540767179, 0.9264667046169273, 0.7007533887482096, 0.9456723551848253, 0.8842081250207321, 0.6188212346050516, 0.8632155132829304, 0.7960087145580457, 0.9376249517463054, 0.657711559847133, 0.8665043783490352, 0.8213535321636006, 0.8595132628598157, 0.5290955844346499, 0.7569463835834859, 0.8595107248093607, 0.7116230681634043, 0.8019263710483158, 0.5886840501554704, 0.5853636156105402, 0.8313542593139549, 0.9195630185044495, 0.8664108518571536, 0.8072808475125368, 0.7209969240077091, 0.9042605253119455, 0.6856525843280643, 0.5789925183558848, 0.5529231707683319, 0.6455244251596519, 0.6309951453562814, 0.8484892500188466, 0.5717063598026898, 0.543578485924304, 0.6482772987788462, 0.8808136933791948, 0.5500201867550136, 0.7162674501989618, 0.8446995144144044, 0.6258657921604354, 0.7889274548192431, 0.6926220623884864, 0.5869117708787261, 0.6049806958837627, 0.5544634417312186, 0.6803917209752559, 0.5329256947938479, 0.6251831028765815, 0.9686255487476989, 0.6693161272515193, 0.6018045002391936, 0.6136470647073029, 0.7006761698417143, 0.9560500202518736, 0.9082327996500732, 0.7149784609158061, 0.8535215404317731, 0.5762375704318814, 0.7295963980633104, 0.8164091337431321, 0.9298864868947626, 0.5719543554507007, 0.7245213540635813, 0.6397133863695404, 0.5113598148484136, 0.9796105495284875, 0.755777012760537, 0.6441523644223616, 0.5211088161337902, 0.7823077186881309, 0.6014077753033269, 0.5174382185526643, 0.7794087005265369, 0.8158853329183986, 0.8051218807143782, 0.8344496628081393, 0.7799038204848311, 0.7007343849256948, 0.5789651399775446, 0.9186939121254118, 0.5800649224972613, 0.997940792911789, 0.5076154260060124, 0.9114643288322005, 0.6168902101547552, 0.6879034339784261, 0.7885181098875279, 0.8478032667829125, 0.8471035604429518, 0.7830964701891708, 0.5834035994473403, 0.5912846408862826, 0.6126327910445984, 0.7113104378192491, 0.7623346088368388, 0.9544598356468286, 0.6368023913392699, 0.7839299049080267, 0.5157603849254793, 0.7707112601657498, 0.6200738627250632, 0.6860756384291924, 0.6971147194176204, 0.8992718498492973, 0.6200716542226198, 0.8235958992734276, 0.7105513978051694, 0.8308607940147007, 0.5009449724397756, 0.8404152443022201, 0.9271554334298377, 0.7615001160541264, 0.665795427599405, 0.7576434921462787, 0.677666528692124, 0.6153544761835656, 0.6599806758984768, 0.5549028258454989, 0.537087034381724, 0.9059423590846216, 0.6364919486632519, 0.8535692674336279, 0.8194822022406671, 0.732703036845648, 0.6408959353882342, 0.979134649001633, 0.8446012706391948, 0.727537959751966, 0.8992071757369342, 0.773033991078701, 0.6912035636680639, 0.6678239513620563, 0.579112166076426, 0.5246311471905317, 0.9247041272231906, 0.6219166314420218, 0.8966048768284001, 0.753449396196942, 0.825216094887963, 0.8966924548860679, 0.772027133798461, 0.6305688871119586, 0.6138557318036646, 0.8377193575618891, 0.575220792061786, 0.6811658955620439, 0.8063325675854576, 0.6024894409737116, 0.8321565863137921, 0.5853723971011682, 0.8211784462497813, 0.5621405057904378, 0.8060243555198678, 0.7615044568558158, 0.749418615771406, 0.9882220842117067, 0.5473214405997162, 0.9394105144036239, 0.9940938074739658, 0.844247121298296, 0.7104797988984898, 0.6194320807267331, 0.9744735968605656, 0.7159678852753074, 0.686481606445342, 0.7309094290988748, 0.7697582007653805, 0.9641044829530394, 0.6495325860132362, 0.8477250158522804, 0.8031072821919533, 0.733212344797883, 0.7040279272680836, 0.8333788219820861, 0.7106192911484892, 0.6054341860385409, 0.6645145929803637, 0.6749436215604394, 0.7342329016647018, 0.7487611514291992, 0.7341853173193882, 0.8319120463629286, 0.8471065816777889, 0.5450602752088898, 0.588963920357326, 0.9634946038397014, 0.5275860021549643, 0.6131238617233276, 0.9026521979716229, 0.8649774042461855, 0.6254856567851594, 0.587585401841259, 0.8702427455852668, 0.9734038850652624, 0.6907389234247403, 0.6742848406792503, 0.8892310557838489, 0.7005429100889178, 0.6323093396099213, 0.6629025660883385, 0.8097239561486289, 0.827971540355219, 0.9483600549325943, 0.7096273182420537, 0.6186179143139622, 0.869593638141843, 0.589465010335807, 0.8437662173288232, 0.6860581451873626, 0.6997440197245475, 0.7950864998630973, 0.6002173651070569, 0.5072396491933654, 0.5687157981012682, 0.8328051767954174, 0.6151009718360505, 0.5131032541978355, 0.9547384677445773, 0.8628382300004067, 0.8573698257063507, 0.5968707959804591, 0.9111539725677904, 0.6952103207359548, 0.9668626553945241, 0.6951090243475937, 0.7881437296558504, 0.6886910010927544, 0.9240602200264298, 0.5110176933860936, 0.6298130729260677, 0.7829937448417085, 0.6441845485354231, 0.8963213253725464, 0.9166886615283922, 0.6075291794609559, 0.8028977059410873, 0.9171693181925586, 0.6477863898916207, 0.5471484145923962, 0.6302032521165666, 0.6683021898564758, 0.7340124672781195, 0.5426796906112303, 0.8757562100828133, 0.8171621627299078, 0.8365153218732406, 0.8609893530223891, 0.9707393155196433, 0.7666186376531046, 0.9965525256324854, 0.5147487497819987, 0.9311713013883948, 0.7119007450065112, 0.9213851603626304, 0.5340260511161686, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0, 50000.0};
int h_B[]= {
0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 97, 99, 101, 103, 106, 108, 111, 113, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 142, 144, 146, 148, 150, 152, 158, 160, 163, 165, 168, 170, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 199, 201, 204, 206, 209, 211, 198, 116, 203, 198, 116, 198, 116, 203, 193, 215, 116, 156, 156, 193, 196, 196, 198, 215, 587, 589, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 162, 157, 162, 157, 167, 141, 105, 141, 110, 213, 208, 162, 157, 162, 157, 162, 157, 167, 141, 110, 105, 777, 784, 203, 213, 208, 162, 157, 141, 110, 105, 213, 208, 213, 208, 787, 162, 157, 141, 771, 162, 157, 172, 777, 208, 162, 157, 141, 771, 162, 157, 172, 777, 213, 162, 157, 162, 157, 162, 157, 167, 141, 110, 105, 162, 157, 172, 777, 213, 208, 162, 157, 162, 157, 167, 141, 105, 141, 110, 213, 208, 162, 157, 162, 157, 167, 141, 748, 162, 157, 172, 777, 203, 213, 208, 162, 157, 162, 157, 162, 157, 167, 141, 110, 105, 162, 157, 172, 110, 105, 213, 208, 213, 208, 162, 157, 141, 110, 105, 213, 208, 213, 208, 162, 157, 162, 157, 162, 157, 167, 141, 110, 105, 162, 157, 172, 777, 213, 208, 162, 157, 162, 157, 162, 157, 167, 141, 771, 162, 157, 162, 157, 167, 172, 777, 203, 213, 208, 203, 213, 208, 798, 786, 798, 786, 798, 799, 798, 799, 798, 799, 798, 799, 798, 799, 798, 791, 799, 799, 799, 798, 799, 798, 7, 8, 9, 10, 11, 12, 13, 14, 15, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 799, 798, 799, 798, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 9, 10, 11, 12, 13, 14, 15, 1008, 1010, 1017, 1019, 1021, 1023, 1027, 1031, 1033, 1036, 1038, 1040, 1042, 1046, 1051, 1055, 1060, 1062, 1064, 1068, 1070, 1074, 1076, 1078, 1085, 1087, 1089, 1094, 1099, 1101, 1103, 1105, 1109, 1111, 1114, 1116, 1118, 1120, 1123, 1125, 1127, 1129, 1131, 1133, 1137, 1139, 1143, 1145, 1147, 1149, 1154, 1156, 1162, 1165, 1016, 1014, 1029, 1030, 1164, 1168, 1170, 1153, 1161, 1172, 1173, 1164, 1174, 1175, 1045, 1049, 1164, 801, 1054, 1058, 1164, 801, 1073, 1180, 1182, 1084, 1082, 1093, 1097, 1098, 1186, 1142, 1153, 1160, 1161, 1164, 10, 11, 12, 13, 14, 15, 1012, 796, 795, 1254, 1255, 797, 1025, 796, 795, 1206, 1256, 1257, 797, 1258, 1151, 796, 795, 1209, 792, 793, 1261, 1262, 1265, 1151, 796, 795, 1268, 1158, 796, 795, 1269, 1270, 1271, 1151, 796, 795, 1272, 1158, 796, 795, 1273, 1274, 1275, 1066, 796, 795, 1219, 1158, 796, 795, 1276, 797, 1080, 796, 795, 1279, 1280, 797, 1091, 796, 795, 1281, 1158, 796, 795, 1282, 1283, 797, 1107, 796, 795, 1232, 1158, 796, 795, 1234, 797, 801, 1151, 796, 795, 1238, 792, 793, 1135, 796, 795, 1244, 1158, 796, 795, 1285, 797, 1151, 796, 795, 1286, 1158, 796, 795, 1287, 1288, 797, 1289, 801, 9, 10, 11, 12, 13, 14, 15, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1323, 1324, 1325, 1327, 1329, 1330, 1331, 1333, 1334, 1335, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1358, 1359, 1360, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1388, 1389, 1390, 1391, 1393, 1394, 1395, 1397, 1398, 1399, 1400, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1408, 1413, 1418, 1424, 1425, 1426, 1429, 1432, 1433, 1436, 1439, 1440, 1444, 1448, 1453, 1456, 1460, 1464, 1470, 1476, 1480, 1484, 1487, 1490, 1492, 1412, 1493, 1417, 1423, 1422, 1493, 1447, 1452, 1459, 1469, 1468, 1475, 1474, 1493, 1483, 8, 9, 10, 11, 12, 13, 14, 15, 1504, 1505, 1506, 1509, 1510, 1512, 1513, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1529, 1530, 1531, 1532, 1533, 1475, 1474, 1328, 1338, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1475, 1474, 1542, 1543, 1493, 1491, 10, 11, 12, 13, 14, 15, 1396, 1411, 1306, 1416, 1572, 1396, 1421, 1574, 1396, 1316, 1576, 1577, 1326, 1322, 1578, 1336, 1332, 1579, 1346, 1443, 1580, 1396, 1451, 1361, 1357, 1467, 1463, 1584, 1586, 1396, 1473, 1588, 1589, 1387, 1479, 1590, 1396, 1392, 1592, 1593, 8, 9, 10, 11, 12, 13, 14, 15, 1600, 1601, 1602, 1603, 1605, 1606, 1608, 1609, 1610, 1612, 1613, 1615, 1616, 1618, 1619, 1621, 1622, 1623, 1624, 1625, 1626, 1629, 1630, 1631, 1633, 1634, 1636, 1637, 1638, 13, 14, 15, 1648, 1650, 1652, 1654, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1672, 1674, 13, 14, 15, 1628, 1676, 1583, 1617, 1620, 1571, 1604, 1656, 1582, 1607, 1614, 1627, 1635, 1671, 14, 15, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 14, 15, 1712, 1714, 1716, 1718, 1720, 1722, 1724, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1728, 1730, 1732, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1744, 1746, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1760, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 802, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1792, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
int h_C[]= {
1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 98, 100, 102, 104, 107, 109, 112, 114, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 147, 149, 151, 153, 159, 161, 164, 166, 169, 171, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 200, 202, 205, 207, 210, 212, 115, 115, 194, 115, 115, 115, 197, 195, 96, 96, 115, 154, 155, 214, 194, 195, 197, 214, 588, 590, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 609, 611, 613, 615, 617, 619, 621, 623, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 238, 239, 250, 253, 254, 289, 334, 335, 343, 346, 363, 375, 376, 385, 386, 387, 388, 392, 723, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 765, 746, 773, 767, 768, 742, 736, 744, 745, 780, 779, 765, 764, 773, 766, 773, 767, 768, 760, 755, 737, 763, 785, 778, 780, 779, 765, 753, 760, 755, 754, 757, 756, 759, 758, 788, 765, 738, 769, 770, 773, 772, 775, 776, 782, 765, 739, 769, 770, 773, 772, 775, 776, 783, 765, 764, 773, 766, 773, 767, 768, 740, 762, 741, 773, 772, 775, 763, 780, 779, 765, 746, 773, 767, 768, 742, 743, 744, 745, 780, 779, 765, 746, 773, 767, 768, 747, 770, 773, 772, 775, 776, 778, 780, 749, 765, 764, 773, 766, 773, 767, 768, 760, 762, 750, 773, 772, 775, 752, 751, 780, 779, 783, 782, 765, 753, 760, 755, 754, 757, 756, 759, 758, 765, 764, 773, 766, 773, 767, 768, 760, 762, 761, 773, 772, 775, 763, 780, 779, 765, 764, 773, 766, 773, 767, 768, 769, 770, 773, 772, 773, 773, 774, 775, 776, 778, 780, 779, 781, 783, 782, 790, 790, 790, 790, 790, 790, 790, 790, 790, 789, 789, 789, 789, 790, 794, 790, 790, 794, 800, 800, 800, 800, 7, 8, 9, 10, 11, 12, 13, 14, 15, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 380, 381, 382, 383, 384, 389, 390, 391, 398, 412, 413, 415, 416, 851, 851, 851, 851, 434, 435, 446, 447, 457, 458, 460, 461, 467, 488, 490, 491, 507, 517, 518, 521, 522, 9, 10, 11, 12, 13, 14, 15, 1009, 1011, 1018, 1020, 1022, 1024, 1028, 1032, 1034, 1037, 1039, 1041, 1043, 1047, 1052, 1056, 1061, 1063, 1065, 1069, 1071, 1075, 1077, 1079, 1086, 1088, 1090, 1095, 1100, 1102, 1104, 1106, 1110, 1112, 1115, 1117, 1119, 1121, 1124, 1126, 1128, 1130, 1132, 1134, 1138, 1140, 1144, 1146, 1148, 1150, 1155, 1157, 1163, 1166, 1015, 1013, 1159, 838, 851, 1169, 1171, 1122, 851, 420, 421, 851, 423, 424, 1044, 1048, 790, 1050, 1053, 1057, 790, 1059, 1072, 1181, 1183, 1083, 1081, 1092, 1096, 790, 1187, 1141, 1152, 1159, 800, 800, 10, 11, 12, 13, 14, 15, 1201, 1248, 1200, 396, 397, 1202, 1205, 1204, 1203, 1026, 404, 405, 1207, 407, 1249, 1248, 1208, 1035, 1210, 1211, 418, 419, 422, 1249, 1248, 1212, 428, 1251, 1251, 1213, 432, 433, 436, 1249, 1248, 1214, 440, 1251, 1251, 1215, 444, 445, 448, 1218, 1217, 1216, 1067, 1251, 1251, 1220, 456, 1221, 1223, 1248, 1222, 465, 466, 1224, 1226, 1248, 1225, 472, 1251, 1251, 1227, 476, 477, 1228, 1231, 1230, 1229, 1108, 1251, 1251, 1233, 1113, 1235, 1236, 1249, 1248, 1237, 1122, 1239, 1240, 1243, 1242, 1241, 1136, 1251, 1251, 1245, 505, 1246, 1249, 1248, 1247, 511, 1251, 1251, 1250, 515, 516, 1252, 520, 1253, 9, 10, 11, 12, 13, 14, 15, 393, 394, 395, 1300, 399, 400, 401, 402, 403, 406, 408, 409, 410, 411, 414, 417, 1263, 1266, 425, 426, 427, 429, 430, 431, 1176, 437, 438, 439, 441, 442, 443, 1178, 449, 450, 451, 452, 453, 454, 455, 459, 462, 463, 464, 1352, 468, 469, 470, 471, 473, 474, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 512, 513, 514, 1189, 519, 1191, 523, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1409, 1414, 1419, 1264, 1267, 1427, 1430, 1177, 1434, 1437, 1179, 1441, 1445, 1449, 1454, 1457, 1461, 1465, 1471, 1477, 1481, 1485, 1488, 1190, 1192, 1167, 1309, 1307, 1260, 1259, 1278, 1277, 1184, 1362, 1185, 1185, 1284, 1284, 1188, 1188, 8, 9, 10, 11, 12, 13, 14, 15, 1410, 1415, 1420, 1428, 1431, 1435, 1438, 1442, 1446, 1450, 1455, 1458, 1462, 1466, 1472, 1478, 1482, 1486, 1489, 526, 529, 530, 533, 534, 1508, 1507, 1511, 1514, 547, 548, 551, 554, 557, 558, 559, 560, 1528, 1527, 567, 568, 1528, 1527, 10, 11, 12, 13, 14, 15, 1570, 1552, 1570, 1553, 1573, 1570, 1554, 1575, 1570, 1566, 537, 538, 1556, 1555, 541, 1558, 1557, 544, 1560, 1559, 1581, 1570, 1561, 1563, 1562, 1565, 1564, 1585, 1587, 1570, 1566, 563, 564, 1568, 1567, 1591, 1570, 1569, 571, 572, 8, 9, 10, 11, 12, 13, 14, 15, 524, 525, 527, 528, 531, 532, 535, 536, 1611, 539, 540, 542, 543, 545, 546, 549, 550, 552, 553, 555, 556, 561, 562, 1632, 565, 566, 569, 570, 1639, 13, 14, 15, 1649, 1651, 1653, 1655, 1658, 1660, 1662, 1664, 1666, 1668, 1670, 1673, 1675, 13, 14, 15, 1690, 1692, 1688, 1685, 1686, 1680, 1681, 1683, 1687, 1682, 1684, 1689, 1691, 1690, 14, 15, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 14, 15, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1729, 1731, 1733, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1745, 1734, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1761, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1776, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 591, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
bool h_Op[]= {
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#define THREADS_PER_BLOCK 16
#define BLOCKS_PER_GRID 1
#define SIZE_OF_IN 608
#define SIZE_OF_AC 1216
__device__ void
ac(float *A, const int *B, const int *C, const bool *Op, int n_iter) { 
  int i= blockDim.x * blockIdx.x + threadIdx.x;
  __shared__  float R[114*THREADS_PER_BLOCK];
  const int t= THREADS_PER_BLOCK;
  __shared__ float final;
  final=0;
  R[i + 0*t] = A[i + 0*t];
  R[i + 1*t] = A[i + 1*t];
  R[i + 2*t] = A[i + 2*t];
  R[i + 3*t] = A[i + 3*t];
  R[i + 4*t] = A[i + 4*t];
  R[i + 5*t] = A[i + 5*t];
  R[i + 6*t] = A[i + 6*t];
  R[i + 7*t] = A[i + 7*t];
  R[i + 8*t] = A[i + 8*t];
  R[i + 9*t] = A[i + 9*t];
  R[i + 10*t] = A[i + 10*t];
  R[i + 11*t] = A[i + 11*t];
  R[i + 12*t] = A[i + 12*t];
  R[i + 13*t] = A[i + 13*t];
  R[i + 14*t] = A[i + 14*t];
  R[i + 15*t] = A[i + 15*t];
  R[i + 16*t] = A[i + 16*t];
  R[i + 17*t] = A[i + 17*t];
  R[i + 18*t] = A[i + 18*t];
  R[i + 19*t] = A[i + 19*t];
  R[i + 20*t] = A[i + 20*t];
  R[i + 21*t] = A[i + 21*t];
  R[i + 22*t] = A[i + 22*t];
  R[i + 23*t] = A[i + 23*t];
  R[i + 24*t] = A[i + 24*t];
  R[i + 25*t] = A[i + 25*t];
  R[i + 26*t] = A[i + 26*t];
  R[i + 27*t] = A[i + 27*t];
  R[i + 28*t] = A[i + 28*t];
  R[i + 29*t] = A[i + 29*t];
  R[i + 30*t] = A[i + 30*t];
  R[i + 31*t] = A[i + 31*t];
  R[i + 32*t] = A[i + 32*t];
  R[i + 33*t] = A[i + 33*t];
  R[i + 34*t] = A[i + 34*t];
  R[i + 35*t] = A[i + 35*t];
  R[i + 36*t] = A[i + 36*t];
  R[i + 37*t] = A[i + 37*t];
  __syncthreads();
  for (int iter=0; iter< n_iter; iter++) {
    R[i + 38*t] = Op[i + 0*t] ? R[B[i + 0*t]] * R[C[i + 0*t]] : R[B[i + 0*t]] + R[C[i + 0*t]];
    R[i + 39*t] = Op[i + 1*t] ? R[B[i + 1*t]] * R[C[i + 1*t]] : R[B[i + 1*t]] + R[C[i + 1*t]];
    R[i + 40*t] = Op[i + 2*t] ? R[B[i + 2*t]] * R[C[i + 2*t]] : R[B[i + 2*t]] + R[C[i + 2*t]];
    R[i + 41*t] = Op[i + 3*t] ? R[B[i + 3*t]] * R[C[i + 3*t]] : R[B[i + 3*t]] + R[C[i + 3*t]];
    R[i + 42*t] = Op[i + 4*t] ? R[B[i + 4*t]] * R[C[i + 4*t]] : R[B[i + 4*t]] + R[C[i + 4*t]];
    R[i + 43*t] = Op[i + 5*t] ? R[B[i + 5*t]] * R[C[i + 5*t]] : R[B[i + 5*t]] + R[C[i + 5*t]];
    R[i + 44*t] = Op[i + 6*t] ? R[B[i + 6*t]] * R[C[i + 6*t]] : R[B[i + 6*t]] + R[C[i + 6*t]];
    R[i + 45*t] = Op[i + 7*t] ? R[B[i + 7*t]] * R[C[i + 7*t]] : R[B[i + 7*t]] + R[C[i + 7*t]];
    __syncthreads();
    R[i + 46*t] = Op[i + 8*t] ? R[B[i + 8*t]] * R[C[i + 8*t]] : R[B[i + 8*t]] + R[C[i + 8*t]];
    R[i + 47*t] = Op[i + 9*t] ? R[B[i + 9*t]] * R[C[i + 9*t]] : R[B[i + 9*t]] + R[C[i + 9*t]];
    R[i + 48*t] = Op[i + 10*t] ? R[B[i + 10*t]] * R[C[i + 10*t]] : R[B[i + 10*t]] + R[C[i + 10*t]];
    R[i + 49*t] = Op[i + 11*t] ? R[B[i + 11*t]] * R[C[i + 11*t]] : R[B[i + 11*t]] + R[C[i + 11*t]];
    R[i + 50*t] = Op[i + 12*t] ? R[B[i + 12*t]] * R[C[i + 12*t]] : R[B[i + 12*t]] + R[C[i + 12*t]];
    __syncthreads();
    R[i + 51*t] = Op[i + 13*t] ? R[B[i + 13*t]] * R[C[i + 13*t]] : R[B[i + 13*t]] + R[C[i + 13*t]];
    R[i + 52*t] = Op[i + 14*t] ? R[B[i + 14*t]] * R[C[i + 14*t]] : R[B[i + 14*t]] + R[C[i + 14*t]];
    R[i + 53*t] = Op[i + 15*t] ? R[B[i + 15*t]] * R[C[i + 15*t]] : R[B[i + 15*t]] + R[C[i + 15*t]];
    R[i + 54*t] = Op[i + 16*t] ? R[B[i + 16*t]] * R[C[i + 16*t]] : R[B[i + 16*t]] + R[C[i + 16*t]];
    R[i + 55*t] = Op[i + 17*t] ? R[B[i + 17*t]] * R[C[i + 17*t]] : R[B[i + 17*t]] + R[C[i + 17*t]];
    R[i + 56*t] = Op[i + 18*t] ? R[B[i + 18*t]] * R[C[i + 18*t]] : R[B[i + 18*t]] + R[C[i + 18*t]];
    R[i + 57*t] = Op[i + 19*t] ? R[B[i + 19*t]] * R[C[i + 19*t]] : R[B[i + 19*t]] + R[C[i + 19*t]];
    R[i + 58*t] = Op[i + 20*t] ? R[B[i + 20*t]] * R[C[i + 20*t]] : R[B[i + 20*t]] + R[C[i + 20*t]];
    R[i + 59*t] = Op[i + 21*t] ? R[B[i + 21*t]] * R[C[i + 21*t]] : R[B[i + 21*t]] + R[C[i + 21*t]];
    R[i + 60*t] = Op[i + 22*t] ? R[B[i + 22*t]] * R[C[i + 22*t]] : R[B[i + 22*t]] + R[C[i + 22*t]];
    R[i + 61*t] = Op[i + 23*t] ? R[B[i + 23*t]] * R[C[i + 23*t]] : R[B[i + 23*t]] + R[C[i + 23*t]];
    R[i + 62*t] = Op[i + 24*t] ? R[B[i + 24*t]] * R[C[i + 24*t]] : R[B[i + 24*t]] + R[C[i + 24*t]];
    __syncthreads();
    R[i + 63*t] = Op[i + 25*t] ? R[B[i + 25*t]] * R[C[i + 25*t]] : R[B[i + 25*t]] + R[C[i + 25*t]];
    R[i + 64*t] = Op[i + 26*t] ? R[B[i + 26*t]] * R[C[i + 26*t]] : R[B[i + 26*t]] + R[C[i + 26*t]];
    R[i + 65*t] = Op[i + 27*t] ? R[B[i + 27*t]] * R[C[i + 27*t]] : R[B[i + 27*t]] + R[C[i + 27*t]];
    R[i + 66*t] = Op[i + 28*t] ? R[B[i + 28*t]] * R[C[i + 28*t]] : R[B[i + 28*t]] + R[C[i + 28*t]];
    R[i + 67*t] = Op[i + 29*t] ? R[B[i + 29*t]] * R[C[i + 29*t]] : R[B[i + 29*t]] + R[C[i + 29*t]];
    R[i + 68*t] = Op[i + 30*t] ? R[B[i + 30*t]] * R[C[i + 30*t]] : R[B[i + 30*t]] + R[C[i + 30*t]];
    R[i + 69*t] = Op[i + 31*t] ? R[B[i + 31*t]] * R[C[i + 31*t]] : R[B[i + 31*t]] + R[C[i + 31*t]];
    R[i + 70*t] = Op[i + 32*t] ? R[B[i + 32*t]] * R[C[i + 32*t]] : R[B[i + 32*t]] + R[C[i + 32*t]];
    R[i + 71*t] = Op[i + 33*t] ? R[B[i + 33*t]] * R[C[i + 33*t]] : R[B[i + 33*t]] + R[C[i + 33*t]];
    R[i + 72*t] = Op[i + 34*t] ? R[B[i + 34*t]] * R[C[i + 34*t]] : R[B[i + 34*t]] + R[C[i + 34*t]];
    R[i + 73*t] = Op[i + 35*t] ? R[B[i + 35*t]] * R[C[i + 35*t]] : R[B[i + 35*t]] + R[C[i + 35*t]];
    R[i + 74*t] = Op[i + 36*t] ? R[B[i + 36*t]] * R[C[i + 36*t]] : R[B[i + 36*t]] + R[C[i + 36*t]];
    __syncthreads();
    R[i + 75*t] = Op[i + 37*t] ? R[B[i + 37*t]] * R[C[i + 37*t]] : R[B[i + 37*t]] + R[C[i + 37*t]];
    R[i + 76*t] = Op[i + 38*t] ? R[B[i + 38*t]] * R[C[i + 38*t]] : R[B[i + 38*t]] + R[C[i + 38*t]];
    R[i + 77*t] = Op[i + 39*t] ? R[B[i + 39*t]] * R[C[i + 39*t]] : R[B[i + 39*t]] + R[C[i + 39*t]];
    R[i + 78*t] = Op[i + 40*t] ? R[B[i + 40*t]] * R[C[i + 40*t]] : R[B[i + 40*t]] + R[C[i + 40*t]];
    R[i + 79*t] = Op[i + 41*t] ? R[B[i + 41*t]] * R[C[i + 41*t]] : R[B[i + 41*t]] + R[C[i + 41*t]];
    R[i + 80*t] = Op[i + 42*t] ? R[B[i + 42*t]] * R[C[i + 42*t]] : R[B[i + 42*t]] + R[C[i + 42*t]];
    __syncthreads();
    R[i + 81*t] = Op[i + 43*t] ? R[B[i + 43*t]] * R[C[i + 43*t]] : R[B[i + 43*t]] + R[C[i + 43*t]];
    R[i + 82*t] = Op[i + 44*t] ? R[B[i + 44*t]] * R[C[i + 44*t]] : R[B[i + 44*t]] + R[C[i + 44*t]];
    R[i + 83*t] = Op[i + 45*t] ? R[B[i + 45*t]] * R[C[i + 45*t]] : R[B[i + 45*t]] + R[C[i + 45*t]];
    R[i + 84*t] = Op[i + 46*t] ? R[B[i + 46*t]] * R[C[i + 46*t]] : R[B[i + 46*t]] + R[C[i + 46*t]];
    R[i + 85*t] = Op[i + 47*t] ? R[B[i + 47*t]] * R[C[i + 47*t]] : R[B[i + 47*t]] + R[C[i + 47*t]];
    R[i + 86*t] = Op[i + 48*t] ? R[B[i + 48*t]] * R[C[i + 48*t]] : R[B[i + 48*t]] + R[C[i + 48*t]];
    R[i + 87*t] = Op[i + 49*t] ? R[B[i + 49*t]] * R[C[i + 49*t]] : R[B[i + 49*t]] + R[C[i + 49*t]];
    __syncthreads();
    R[i + 88*t] = Op[i + 50*t] ? R[B[i + 50*t]] * R[C[i + 50*t]] : R[B[i + 50*t]] + R[C[i + 50*t]];
    R[i + 89*t] = Op[i + 51*t] ? R[B[i + 51*t]] * R[C[i + 51*t]] : R[B[i + 51*t]] + R[C[i + 51*t]];
    R[i + 90*t] = Op[i + 52*t] ? R[B[i + 52*t]] * R[C[i + 52*t]] : R[B[i + 52*t]] + R[C[i + 52*t]];
    R[i + 91*t] = Op[i + 53*t] ? R[B[i + 53*t]] * R[C[i + 53*t]] : R[B[i + 53*t]] + R[C[i + 53*t]];
    R[i + 92*t] = Op[i + 54*t] ? R[B[i + 54*t]] * R[C[i + 54*t]] : R[B[i + 54*t]] + R[C[i + 54*t]];
    R[i + 93*t] = Op[i + 55*t] ? R[B[i + 55*t]] * R[C[i + 55*t]] : R[B[i + 55*t]] + R[C[i + 55*t]];
    __syncthreads();
    R[i + 94*t] = Op[i + 56*t] ? R[B[i + 56*t]] * R[C[i + 56*t]] : R[B[i + 56*t]] + R[C[i + 56*t]];
    R[i + 95*t] = Op[i + 57*t] ? R[B[i + 57*t]] * R[C[i + 57*t]] : R[B[i + 57*t]] + R[C[i + 57*t]];
    R[i + 96*t] = Op[i + 58*t] ? R[B[i + 58*t]] * R[C[i + 58*t]] : R[B[i + 58*t]] + R[C[i + 58*t]];
    __syncthreads();
    R[i + 97*t] = Op[i + 59*t] ? R[B[i + 59*t]] * R[C[i + 59*t]] : R[B[i + 59*t]] + R[C[i + 59*t]];
    R[i + 98*t] = Op[i + 60*t] ? R[B[i + 60*t]] * R[C[i + 60*t]] : R[B[i + 60*t]] + R[C[i + 60*t]];
    R[i + 99*t] = Op[i + 61*t] ? R[B[i + 61*t]] * R[C[i + 61*t]] : R[B[i + 61*t]] + R[C[i + 61*t]];
    __syncthreads();
    R[i + 100*t] = Op[i + 62*t] ? R[B[i + 62*t]] * R[C[i + 62*t]] : R[B[i + 62*t]] + R[C[i + 62*t]];
    R[i + 101*t] = Op[i + 63*t] ? R[B[i + 63*t]] * R[C[i + 63*t]] : R[B[i + 63*t]] + R[C[i + 63*t]];
    R[i + 102*t] = Op[i + 64*t] ? R[B[i + 64*t]] * R[C[i + 64*t]] : R[B[i + 64*t]] + R[C[i + 64*t]];
    __syncthreads();
    R[i + 103*t] = Op[i + 65*t] ? R[B[i + 65*t]] * R[C[i + 65*t]] : R[B[i + 65*t]] + R[C[i + 65*t]];
    R[i + 104*t] = Op[i + 66*t] ? R[B[i + 66*t]] * R[C[i + 66*t]] : R[B[i + 66*t]] + R[C[i + 66*t]];
    __syncthreads();
    R[i + 105*t] = Op[i + 67*t] ? R[B[i + 67*t]] * R[C[i + 67*t]] : R[B[i + 67*t]] + R[C[i + 67*t]];
    __syncthreads();
    R[i + 106*t] = Op[i + 68*t] ? R[B[i + 68*t]] * R[C[i + 68*t]] : R[B[i + 68*t]] + R[C[i + 68*t]];
    __syncthreads();
    R[i + 107*t] = Op[i + 69*t] ? R[B[i + 69*t]] * R[C[i + 69*t]] : R[B[i + 69*t]] + R[C[i + 69*t]];
    __syncthreads();
    R[i + 108*t] = Op[i + 70*t] ? R[B[i + 70*t]] * R[C[i + 70*t]] : R[B[i + 70*t]] + R[C[i + 70*t]];
    __syncthreads();
    R[i + 109*t] = Op[i + 71*t] ? R[B[i + 71*t]] * R[C[i + 71*t]] : R[B[i + 71*t]] + R[C[i + 71*t]];
    __syncthreads();
    R[i + 110*t] = Op[i + 72*t] ? R[B[i + 72*t]] * R[C[i + 72*t]] : R[B[i + 72*t]] + R[C[i + 72*t]];
    __syncthreads();
    R[i + 111*t] = Op[i + 73*t] ? R[B[i + 73*t]] * R[C[i + 73*t]] : R[B[i + 73*t]] + R[C[i + 73*t]];
    __syncthreads();
    R[i + 112*t] = Op[i + 74*t] ? R[B[i + 74*t]] * R[C[i + 74*t]] : R[B[i + 74*t]] + R[C[i + 74*t]];
    __syncthreads();
    R[i + 113*t] = Op[i + 75*t] ? R[B[i + 75*t]] * R[C[i + 75*t]] : R[B[i + 75*t]] + R[C[i + 75*t]];
    if (i==0) { final += R[113*t]; }
    __syncthreads();
  }
  if (i==0) { A[0]= final;} 
}
