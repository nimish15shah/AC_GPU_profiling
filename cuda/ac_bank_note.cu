
#include <stdio.h>
#include <stdlib.h>
// For the CUDA runtime routines (prefixed with "cuda_")
#include <cuda_runtime.h>
#include <sys/time.h>
#include <cooperative_groups.h>


__global__ void
ac(float *A, const int *B, const int *C, const int *op_sel, int n_inputs, const int n_arith, int thresh, int iter) {
  int i= blockDim.x * blockIdx.x + threadIdx.x;
  
  int val_4, val_5, val_6, val_11, val_12, val_13, val_18, val_19, val_20, val_25, val_26, val_27, val_32, val_33, val_34, val_39, val_40, val_41, val_46, val_47, val_48, val_53, val_54, val_55, val_60, val_61, val_62, val_67, val_68, val_69, val_74, val_75, val_76, val_81, val_82, val_83, val_88, val_89, val_90, val_95, val_96, val_97, val_102, val_103, val_104, val_109, val_110, val_111, val_116, val_117, val_118, val_123, val_124, val_125, val_130, val_131, val_132, val_137, val_138, val_139, val_144, val_145, val_146, val_151, val_152, val_153, val_158, val_159, val_160, val_165, val_166, val_167, val_173, val_174, val_175, val_180, val_181, val_182, val_188, val_189, val_190, val_196, val_197, val_198, val_205, val_206, val_207, val_212, val_213, val_214, val_219, val_220, val_221, val_226, val_227, val_228, val_233, val_234, val_235, val_240, val_241, val_242, val_248, val_249, val_250, val_255, val_256, val_257, val_262, val_263, val_264, val_273, val_274, val_275, val_281, val_282, val_283, val_289, val_290, val_291, val_297, val_298, val_299, val_304, val_305, val_306, val_311, val_312, val_313, val_318, val_319, val_320, val_325, val_326, val_327, val_338, val_339, val_340, val_346, val_347, val_348, val_354, val_355, val_356, val_361, val_362, val_364, val_365, val_366, val_368, val_369, val_371, val_372, val_373, val_375, val_376, val_378, val_379, val_381, val_382, val_384, val_385, val_387, val_388, val_390, val_391, val_393, val_394, val_395, val_397, val_398, val_400, val_401, val_402, val_404, val_405, val_407, val_408, val_409, val_411, val_412, val_414, val_415, val_416, val_418, val_419, val_421, val_422, val_424, val_425, val_427, val_428, val_429, val_431, val_432, val_434, val_435, val_437, val_438, val_439, val_441, val_442, val_444, val_445, val_447, val_448, val_449, val_451, val_452, val_454, val_455, val_456, val_458, val_459, val_461, val_462, val_464, val_465, val_466, val_468, val_469, val_471, val_472, val_473, val_475, val_476, val_478, val_479, val_481, val_482, val_483, val_485, val_486, val_488, val_489, val_490, val_492, val_493, val_495, val_496, val_497, val_499, val_500, val_502, val_503, val_505, val_506, val_508, val_509, val_510, val_512, val_513, val_515, val_516, val_518, val_519, val_521, val_522, val_524, val_525, val_526, val_528, val_529, val_531, val_532, val_534, val_535, val_537, val_538, val_539, val_541, val_542, val_544, val_545, val_547, val_548, val_550, val_551, val_553, val_554, val_555, val_557, val_558, val_560, val_561, val_562, val_564, val_565, val_567, val_568, val_569, val_571, val_572, val_574, val_575, val_577, val_578, val_580, val_581, val_582, val_584, val_585, val_587, val_588, val_589, val_591, val_592, val_594, val_595, val_597, val_598, val_600, val_601, val_602, val_604, val_605, val_607, val_608, val_610, val_611, val_612, val_614, val_615, val_617, val_618, val_619, val_621, val_622, val_624, val_625, val_627, val_628, val_630, val_631, val_633, val_634, val_636, val_637, val_639, val_640, val_641, val_643, val_644, val_646, val_647, val_648, val_650, val_651, val_653, val_654, val_655, val_657, val_658, val_660, val_661, val_663, val_664, val_666, val_667, val_669, val_670, val_671, val_673, val_674, val_676, val_677, val_679, val_680, val_682, val_683, val_685, val_686, val_687, val_689, val_690, val_692, val_693, val_694, val_696, val_697, val_699, val_700, val_701, val_703, val_704, val_706, val_707, val_708, val_710, val_711, val_713, val_714, val_716, val_717, val_719, val_720, val_721, val_723, val_724, val_726, val_727, val_728, val_730, val_731, val_733, val_734, val_736, val_737, val_738, val_740, val_741, val_743, val_744, val_745, val_747, val_748, val_750, val_751, val_752, val_754, val_755, val_757, val_758, val_760, val_761, val_763, val_764, val_765, val_767, val_768, val_770, val_771, val_773, val_774, val_775, val_777, val_778, val_780, val_781, val_782, val_784, val_785, val_787, val_788, val_790, val_791, val_792, val_794, val_795, val_797, val_798, val_800, val_801, val_802, val_804, val_805, val_807, val_808, val_809, val_811, val_812, val_814, val_815, val_816, val_818, val_819, val_821, val_822, val_824, val_825, val_827, val_828, val_829, val_831, val_832, val_834, val_835, val_836, val_838, val_839, val_841, val_842, val_844, val_845, val_847, val_848, val_849, val_851, val_852, val_854, val_855, val_857, val_858, val_859, val_861, val_862, val_864, val_865, val_866, val_868, val_869, val_871, val_872, val_873, val_875, val_876, val_878, val_879, val_881, val_882, val_884, val_885, val_887, val_888, val_889, val_891, val_892, val_894, val_895, val_897, val_898, val_900, val_901, val_902, val_904, val_905, val_907, val_908, val_910, val_911, val_913, val_914, val_916, val_917, val_919, val_920, val_921, val_923, val_924, val_926, val_927, val_929, val_930, val_932, val_933, val_935, val_936, val_938, val_939, val_941, val_942, val_943, val_945, val_946, val_948, val_949, val_951, val_952, val_954, val_955, val_956, val_957, val_959, val_960, val_962, val_963, val_964, val_966, val_967, val_969, val_970, val_972, val_973, val_975, val_976, val_978, val_979, val_980, val_981, val_983, val_984, val_986, val_987, val_989, val_990, val_992, val_993, val_995, val_996, val_998, val_999, val_1001, val_1002, val_1004, val_1005, val_1006, val_1007, val_1009, val_1010, val_1012, val_1013, val_1015, val_1016, val_1017, val_1019, val_1020, val_1022, val_1023, val_1025, val_1026, val_1027, val_1029, val_1030, val_1032, val_1033, val_1035, val_1036, val_1038, val_1039, val_1041, val_1042, val_1043, val_1044, val_1046, val_1047, val_1049, val_1050, val_1052, val_1053, val_1054, val_1055, val_1057, val_1058, val_1060, val_1061, val_1063, val_1064, val_1065, val_1066, val_1068, val_1069, val_1071, val_1072, val_1074, val_1075, val_1077, val_1078, val_1079, val_1080, val_1082, val_1083, val_1085, val_1086, val_1088, val_1089, val_1091, val_1092, val_1093, val_1094, val_1096, val_1097, val_1099, val_1100, val_1102, val_1103, val_1105, val_1106, val_1107, val_1108, val_1110, val_1111, val_1113, val_1114, val_1116, val_1117, val_1119, val_1120, val_1121, val_1122, val_1124, val_1125, val_1127, val_1128, val_1130, val_1131, val_1133, val_1134, val_1135, val_1136, val_1138, val_1139, val_1141, val_1142, val_1144, val_1145, val_1147, val_1148, val_1149, val_1150, val_1152, val_1153, val_1155, val_1156, val_1158, val_1159, val_1161, val_1162, val_1163, val_1164, val_1166, val_1167, val_1169, val_1170, val_1172, val_1173, val_1174, val_1176, val_1177, val_1179, val_1180, val_1182, val_1183, val_1184, val_1186, val_1187, val_1189, val_1190, val_1192, val_1193, val_1194, val_1195, val_1197, val_1198, val_1200, val_1201, val_1202, val_1204, val_1205, val_1207, val_1208, val_1210, val_1211, val_1213, val_1214, val_1216, val_1217, val_1218, val_1219, val_1221, val_1222, val_1224, val_1225, val_1227, val_1228, val_1230, val_1231, val_1232, val_1233, val_1235, val_1236, val_1238, val_1239, val_1241, val_1242, val_1244, val_1245, val_1247, val_1248, val_1250, val_1251, val_1252, val_1253, val_1255, val_1256, val_1258, val_1259, val_1261, val_1262, val_1264, val_1265, val_1266, val_1267, val_1269, val_1270, val_1272, val_1273, val_1275, val_1276, val_1278, val_1279, val_1281, val_1282, val_1284, val_1285, val_1286, val_1288, val_1289, val_1291, val_1292, val_1294, val_1295, val_1296, val_1297, val_1299, val_1300, val_1302, val_1303, val_1305, val_1306, val_1308, val_1309, val_1311, val_1312, val_1314, val_1315, val_1316, val_1317, val_1319, val_1320, val_1322, val_1323, val_1325, val_1326, val_1328, val_1329, val_1330, val_1331, val_1333, val_1334, val_1336, val_1337, val_1339, val_1340, val_1342, val_1343, val_1345, val_1346, val_1348, val_1349, val_1350, val_1351, val_1353, val_1354, val_1356, val_1357, val_1359, val_1360, val_1362, val_1363, val_1364, val_1365, val_1367, val_1368, val_1370, val_1371, val_1373, val_1374, val_1376, val_1377, val_1378, val_1379, val_1381, val_1382, val_1384, val_1385, val_1387, val_1388, val_1390, val_1391, val_1392, val_1393, val_1395, val_1396, val_1398, val_1399, val_1401, val_1402, val_1403, val_1405, val_1406, val_1408, val_1409, val_1411, val_1412, val_1413, val_1415, val_1416, val_1418, val_1419, val_1420, val_1422, val_1423, val_1425, val_1426, val_1427, val_1429, val_1430, val_1432, val_1433, val_1434, val_1436, val_1437, val_1439, val_1440, val_1441, val_1443, val_1444, val_1446, val_1447, val_1448, val_1450, val_1451, val_1453, val_1454, val_1455, val_1457, val_1458, val_1460, val_1461, val_1463, val_1464, val_1465, val_1467, val_1468, val_1470, val_1471, val_1473, val_1474, val_1475, val_1477, val_1478, val_1480, val_1481, val_1482, val_1484, val_1485, val_1487, val_1488, val_1489, val_1491, val_1492, val_1494, val_1495, val_1497, val_1498, val_1499, val_1501, val_1502, val_1504, val_1505, val_1507, val_1508, val_1509, val_1511, val_1512, val_1514, val_1515, val_1516, val_1518, val_1519, val_1521, val_1522, val_1523, val_1525, val_1526, val_1528, val_1529, val_1530, val_1532, val_1533, val_1535, val_1536, val_1537, val_1539, val_1540, val_1542, val_1543, val_1544, val_1546, val_1547, val_1549, val_1550, val_1551, val_1553, val_1554, val_1556, val_1557, val_1558, val_1560, val_1561, val_1563, val_1564, val_1565, val_1567, val_1568, val_1570, val_1571, val_1573, val_1574, val_1576, val_1577, val_1579, val_1580, val_1582, val_1583, val_1585, val_1586, val_1588, val_1589, val_1591, val_1592, val_1594, val_1595, val_1597, val_1598, val_1600, val_1601, val_1603, val_1604, val_1606, val_1607, val_1608, val_1609, val_1610, val_1611, val_1612, val_1613, val_1614, val_1615, val_1616, val_1617, val_1618, val_1619, val_1620, val_1625, val_1626, val_1627, val_1629, val_1630;
  int idx_off;

  for (int k=0; k<iter; k++) {
    //idx_off = i*(n_inputs * iter) + n_inputs*k; 
    idx_off = i*(n_inputs); 
 val_4 =  A[idx_off + 0] *  A[idx_off + 1];
 val_5 =  A[idx_off + 2] *  A[idx_off + 3];
 val_6 =  val_4 +  val_5;
 val_11 =  A[idx_off + 7] *  A[idx_off + 8];
 val_12 =  A[idx_off + 9] *  A[idx_off + 10];
 val_13 =  val_11 +  val_12;
 val_18 =  A[idx_off + 14] *  A[idx_off + 15];
 val_19 =  A[idx_off + 16] *  A[idx_off + 17];
 val_20 =  val_18 +  val_19;
 val_25 =  A[idx_off + 21] *  A[idx_off + 22];
 val_26 =  A[idx_off + 23] *  A[idx_off + 24];
 val_27 =  val_25 +  val_26;
 val_32 =  A[idx_off + 28] *  A[idx_off + 29];
 val_33 =  A[idx_off + 30] *  A[idx_off + 31];
 val_34 =  val_32 +  val_33;
 val_39 =  A[idx_off + 35] *  A[idx_off + 36];
 val_40 =  A[idx_off + 37] *  A[idx_off + 38];
 val_41 =  val_39 +  val_40;
 val_46 =  A[idx_off + 42] *  A[idx_off + 43];
 val_47 =  A[idx_off + 44] *  A[idx_off + 45];
 val_48 =  val_46 +  val_47;
 val_53 =  A[idx_off + 49] *  A[idx_off + 50];
 val_54 =  A[idx_off + 51] *  A[idx_off + 52];
 val_55 =  val_53 +  val_54;
 val_60 =  A[idx_off + 56] *  A[idx_off + 57];
 val_61 =  A[idx_off + 58] *  A[idx_off + 59];
 val_62 =  val_60 +  val_61;
 val_67 =  A[idx_off + 63] *  A[idx_off + 64];
 val_68 =  A[idx_off + 65] *  A[idx_off + 66];
 val_69 =  val_67 +  val_68;
 val_74 =  A[idx_off + 70] *  A[idx_off + 71];
 val_75 =  A[idx_off + 72] *  A[idx_off + 73];
 val_76 =  val_74 +  val_75;
 val_81 =  A[idx_off + 77] *  A[idx_off + 78];
 val_82 =  A[idx_off + 79] *  A[idx_off + 80];
 val_83 =  val_81 +  val_82;
 val_88 =  A[idx_off + 84] *  A[idx_off + 85];
 val_89 =  A[idx_off + 86] *  A[idx_off + 87];
 val_90 =  val_88 +  val_89;
 val_95 =  A[idx_off + 91] *  A[idx_off + 92];
 val_96 =  A[idx_off + 93] *  A[idx_off + 94];
 val_97 =  val_95 +  val_96;
 val_102 =  A[idx_off + 98] *  A[idx_off + 99];
 val_103 =  A[idx_off + 100] *  A[idx_off + 101];
 val_104 =  val_102 +  val_103;
 val_109 =  A[idx_off + 105] *  A[idx_off + 106];
 val_110 =  A[idx_off + 107] *  A[idx_off + 108];
 val_111 =  val_109 +  val_110;
 val_116 =  A[idx_off + 112] *  A[idx_off + 113];
 val_117 =  A[idx_off + 114] *  A[idx_off + 115];
 val_118 =  val_116 +  val_117;
 val_123 =  A[idx_off + 119] *  A[idx_off + 120];
 val_124 =  A[idx_off + 121] *  A[idx_off + 122];
 val_125 =  val_123 +  val_124;
 val_130 =  A[idx_off + 126] *  A[idx_off + 127];
 val_131 =  A[idx_off + 128] *  A[idx_off + 129];
 val_132 =  val_130 +  val_131;
 val_137 =  A[idx_off + 133] *  A[idx_off + 134];
 val_138 =  A[idx_off + 135] *  A[idx_off + 136];
 val_139 =  val_137 +  val_138;
 val_144 =  A[idx_off + 140] *  A[idx_off + 141];
 val_145 =  A[idx_off + 142] *  A[idx_off + 143];
 val_146 =  val_144 +  val_145;
 val_151 =  A[idx_off + 147] *  A[idx_off + 148];
 val_152 =  A[idx_off + 149] *  A[idx_off + 150];
 val_153 =  val_151 +  val_152;
 val_158 =  A[idx_off + 154] *  A[idx_off + 155];
 val_159 =  A[idx_off + 156] *  A[idx_off + 157];
 val_160 =  val_158 +  val_159;
 val_165 =  A[idx_off + 161] *  A[idx_off + 162];
 val_166 =  A[idx_off + 163] *  A[idx_off + 164];
 val_167 =  val_165 +  val_166;
 val_173 =  A[idx_off + 169] *  A[idx_off + 170];
 val_174 =  A[idx_off + 171] *  A[idx_off + 172];
 val_175 =  val_173 +  val_174;
 val_180 =  A[idx_off + 176] *  A[idx_off + 177];
 val_181 =  A[idx_off + 178] *  A[idx_off + 179];
 val_182 =  val_180 +  val_181;
 val_188 =  A[idx_off + 184] *  A[idx_off + 185];
 val_189 =  A[idx_off + 186] *  A[idx_off + 187];
 val_190 =  val_188 +  val_189;
 val_196 =  A[idx_off + 192] *  A[idx_off + 193];
 val_197 =  A[idx_off + 194] *  A[idx_off + 195];
 val_198 =  val_196 +  val_197;
 val_205 =  A[idx_off + 201] *  A[idx_off + 202];
 val_206 =  A[idx_off + 203] *  A[idx_off + 204];
 val_207 =  val_205 +  val_206;
 val_212 =  A[idx_off + 208] *  A[idx_off + 209];
 val_213 =  A[idx_off + 210] *  A[idx_off + 211];
 val_214 =  val_212 +  val_213;
 val_219 =  A[idx_off + 215] *  A[idx_off + 216];
 val_220 =  A[idx_off + 217] *  A[idx_off + 218];
 val_221 =  val_219 +  val_220;
 val_226 =  A[idx_off + 222] *  A[idx_off + 223];
 val_227 =  A[idx_off + 224] *  A[idx_off + 225];
 val_228 =  val_226 +  val_227;
 val_233 =  A[idx_off + 229] *  A[idx_off + 230];
 val_234 =  A[idx_off + 231] *  A[idx_off + 232];
 val_235 =  val_233 +  val_234;
 val_240 =  A[idx_off + 236] *  A[idx_off + 237];
 val_241 =  A[idx_off + 238] *  A[idx_off + 239];
 val_242 =  val_240 +  val_241;
 val_248 =  A[idx_off + 244] *  A[idx_off + 245];
 val_249 =  A[idx_off + 246] *  A[idx_off + 247];
 val_250 =  val_248 +  val_249;
 val_255 =  A[idx_off + 251] *  A[idx_off + 252];
 val_256 =  A[idx_off + 253] *  A[idx_off + 254];
 val_257 =  val_255 +  val_256;
 val_262 =  A[idx_off + 258] *  A[idx_off + 259];
 val_263 =  A[idx_off + 260] *  A[idx_off + 261];
 val_264 =  val_262 +  val_263;
 val_273 =  A[idx_off + 269] *  A[idx_off + 270];
 val_274 =  A[idx_off + 271] *  A[idx_off + 272];
 val_275 =  val_273 +  val_274;
 val_281 =  A[idx_off + 277] *  A[idx_off + 278];
 val_282 =  A[idx_off + 279] *  A[idx_off + 280];
 val_283 =  val_281 +  val_282;
 val_289 =  A[idx_off + 285] *  A[idx_off + 286];
 val_290 =  A[idx_off + 287] *  A[idx_off + 288];
 val_291 =  val_289 +  val_290;
 val_297 =  A[idx_off + 293] *  A[idx_off + 294];
 val_298 =  A[idx_off + 295] *  A[idx_off + 296];
 val_299 =  val_297 +  val_298;
 val_304 =  A[idx_off + 300] *  A[idx_off + 301];
 val_305 =  A[idx_off + 302] *  A[idx_off + 303];
 val_306 =  val_304 +  val_305;
 val_311 =  A[idx_off + 307] *  A[idx_off + 308];
 val_312 =  A[idx_off + 309] *  A[idx_off + 310];
 val_313 =  val_311 +  val_312;
 val_318 =  A[idx_off + 314] *  A[idx_off + 315];
 val_319 =  A[idx_off + 316] *  A[idx_off + 317];
 val_320 =  val_318 +  val_319;
 val_325 =  A[idx_off + 321] *  A[idx_off + 322];
 val_326 =  A[idx_off + 323] *  A[idx_off + 324];
 val_327 =  val_325 +  val_326;
 val_338 =  A[idx_off + 334] *  A[idx_off + 335];
 val_339 =  A[idx_off + 336] *  A[idx_off + 337];
 val_340 =  val_338 +  val_339;
 val_346 =  A[idx_off + 342] *  A[idx_off + 343];
 val_347 =  A[idx_off + 344] *  A[idx_off + 345];
 val_348 =  val_346 +  val_347;
 val_354 =  A[idx_off + 350] *  A[idx_off + 351];
 val_355 =  A[idx_off + 352] *  A[idx_off + 353];
 val_356 =  val_354 +  val_355;
 val_361 =  A[idx_off + 276] *  val_214;
 val_362 =  val_361 *  A[idx_off + 360];
 val_364 =  A[idx_off + 268] *  val_76;
 val_365 =  val_364 *  A[idx_off + 363];
 val_366 =  val_362 +  val_365;
 val_368 =  A[idx_off + 276] *  val_275;
 val_369 =  val_368 *  A[idx_off + 367];
 val_371 =  A[idx_off + 268] *  val_228;
 val_372 =  val_371 *  A[idx_off + 370];
 val_373 =  val_369 +  val_372;
 val_375 =  A[idx_off + 284] *  val_235;
 val_376 =  val_375 *  A[idx_off + 374];
 val_378 =  A[idx_off + 243] *  val_48;
 val_379 =  val_378 *  A[idx_off + 377];
 val_381 =  A[idx_off + 183] *  val_6;
 val_382 =  val_381 *  A[idx_off + 380];
 val_384 =  A[idx_off + 243] *  val_62;
 val_385 =  val_384 *  A[idx_off + 383];
 val_387 =  A[idx_off + 191] *  val_69;
 val_388 =  val_387 *  A[idx_off + 386];
 val_390 =  A[idx_off + 357] *  val_327;
 val_391 =  val_390 *  A[idx_off + 389];
 val_393 =  A[idx_off + 349] *  val_320;
 val_394 =  val_393 *  A[idx_off + 392];
 val_395 =  val_391 +  val_394;
 val_397 =  A[idx_off + 276] *  val_214;
 val_398 =  val_397 *  A[idx_off + 396];
 val_400 =  A[idx_off + 268] *  val_207;
 val_401 =  val_400 *  A[idx_off + 399];
 val_402 =  val_398 +  val_401;
 val_404 =  A[idx_off + 276] *  val_275;
 val_405 =  val_404 *  A[idx_off + 403];
 val_407 =  A[idx_off + 268] *  val_221;
 val_408 =  val_407 *  A[idx_off + 406];
 val_409 =  val_405 +  val_408;
 val_411 =  A[idx_off + 276] *  val_275;
 val_412 =  val_411 *  A[idx_off + 410];
 val_414 =  A[idx_off + 268] *  val_228;
 val_415 =  val_414 *  A[idx_off + 413];
 val_416 =  val_412 +  val_415;
 val_418 =  A[idx_off + 284] *  val_235;
 val_419 =  val_418 *  A[idx_off + 417];
 val_421 =  A[idx_off + 243] *  val_175;
 val_422 =  val_421 *  A[idx_off + 420];
 val_424 =  A[idx_off + 191] *  val_139;
 val_425 =  val_424 *  A[idx_off + 423];
 val_427 =  A[idx_off + 183] *  val_13;
 val_428 =  val_427 *  A[idx_off + 426];
 val_429 =  val_425 +  val_428;
 val_431 =  val_306 *  val_198;
 val_432 =  val_431 *  A[idx_off + 430];
 val_434 =  A[idx_off + 333] *  A[idx_off + 199];
 val_435 =  val_434 *  A[idx_off + 433];
 val_437 =  A[idx_off + 200] *  A[idx_off + 199];
 val_438 =  val_437 *  A[idx_off + 436];
 val_439 =  val_435 +  val_438;
 val_441 =  A[idx_off + 341] *  val_313;
 val_442 =  val_441 *  A[idx_off + 440];
 val_444 =  A[idx_off + 357] *  val_327;
 val_445 =  val_444 *  A[idx_off + 443];
 val_447 =  A[idx_off + 349] *  val_320;
 val_448 =  val_447 *  A[idx_off + 446];
 val_449 =  val_445 +  val_448;
 val_451 =  A[idx_off + 276] *  val_214;
 val_452 =  val_451 *  A[idx_off + 450];
 val_454 =  A[idx_off + 268] *  val_125;
 val_455 =  val_454 *  A[idx_off + 453];
 val_456 =  val_452 +  val_455;
 val_458 =  A[idx_off + 243] *  val_175;
 val_459 =  val_458 *  A[idx_off + 457];
 val_461 =  A[idx_off + 191] *  val_139;
 val_462 =  val_461 *  A[idx_off + 460];
 val_464 =  A[idx_off + 183] *  val_132;
 val_465 =  val_464 *  A[idx_off + 463];
 val_466 =  val_462 +  val_465;
 val_468 =  A[idx_off + 357] *  val_153;
 val_469 =  val_468 *  A[idx_off + 467];
 val_471 =  A[idx_off + 349] *  val_146;
 val_472 =  val_471 *  A[idx_off + 470];
 val_473 =  val_469 +  val_472;
 val_475 =  A[idx_off + 341] *  A[idx_off + 329];
 val_476 =  val_475 *  A[idx_off + 474];
 val_478 =  A[idx_off + 357] *  val_167;
 val_479 =  val_478 *  A[idx_off + 477];
 val_481 =  A[idx_off + 349] *  val_160;
 val_482 =  val_481 *  A[idx_off + 480];
 val_483 =  val_479 +  val_482;
 val_485 =  A[idx_off + 333] *  A[idx_off + 199];
 val_486 =  val_485 *  A[idx_off + 484];
 val_488 =  A[idx_off + 200] *  A[idx_off + 199];
 val_489 =  val_488 *  A[idx_off + 487];
 val_490 =  val_486 +  val_489;
 val_492 =  A[idx_off + 276] *  val_214;
 val_493 =  val_492 *  A[idx_off + 491];
 val_495 =  A[idx_off + 268] *  val_20;
 val_496 =  val_495 *  A[idx_off + 494];
 val_497 =  val_493 +  val_496;
 val_499 =  A[idx_off + 243] *  val_242;
 val_500 =  val_499 *  A[idx_off + 498];
 val_502 =  val_257 *  val_250;
 val_503 =  val_502 *  A[idx_off + 501];
 val_505 =  A[idx_off + 276] *  val_275;
 val_506 =  val_505 *  A[idx_off + 504];
 val_508 =  A[idx_off + 268] *  val_264;
 val_509 =  val_508 *  A[idx_off + 507];
 val_510 =  val_506 +  val_509;
 val_512 =  A[idx_off + 292] *  val_291;
 val_513 =  val_512 *  A[idx_off + 511];
 val_515 =  val_306 *  val_299;
 val_516 =  val_515 *  A[idx_off + 514];
 val_518 =  A[idx_off + 349] *  val_348;
 val_519 =  val_518 *  A[idx_off + 517];
 val_521 =  A[idx_off + 276] *  val_214;
 val_522 =  val_521 *  A[idx_off + 520];
 val_524 =  A[idx_off + 268] *  val_27;
 val_525 =  val_524 *  A[idx_off + 523];
 val_526 =  val_522 +  val_525;
 val_528 =  A[idx_off + 243] *  val_242;
 val_529 =  val_528 *  A[idx_off + 527];
 val_531 =  val_257 *  val_250;
 val_532 =  val_531 *  A[idx_off + 530];
 val_534 =  A[idx_off + 276] *  val_275;
 val_535 =  val_534 *  A[idx_off + 533];
 val_537 =  A[idx_off + 268] *  val_264;
 val_538 =  val_537 *  A[idx_off + 536];
 val_539 =  val_535 +  val_538;
 val_541 =  A[idx_off + 292] *  val_291;
 val_542 =  val_541 *  A[idx_off + 540];
 val_544 =  val_306 *  val_299;
 val_545 =  val_544 *  A[idx_off + 543];
 val_547 =  A[idx_off + 357] *  val_356;
 val_548 =  val_547 *  A[idx_off + 546];
 val_550 =  A[idx_off + 276] *  val_214;
 val_551 =  val_550 *  A[idx_off + 549];
 val_553 =  A[idx_off + 268] *  val_207;
 val_554 =  val_553 *  A[idx_off + 552];
 val_555 =  val_551 +  val_554;
 val_557 =  A[idx_off + 276] *  val_275;
 val_558 =  val_557 *  A[idx_off + 556];
 val_560 =  A[idx_off + 268] *  val_221;
 val_561 =  val_560 *  A[idx_off + 559];
 val_562 =  val_558 +  val_561;
 val_564 =  A[idx_off + 276] *  val_275;
 val_565 =  val_564 *  A[idx_off + 563];
 val_567 =  A[idx_off + 268] *  val_228;
 val_568 =  val_567 *  A[idx_off + 566];
 val_569 =  val_565 +  val_568;
 val_571 =  A[idx_off + 284] *  val_235;
 val_572 =  val_571 *  A[idx_off + 570];
 val_574 =  A[idx_off + 243] *  val_34;
 val_575 =  val_574 *  A[idx_off + 573];
 val_577 =  A[idx_off + 191] *  val_190;
 val_578 =  val_577 *  A[idx_off + 576];
 val_580 =  A[idx_off + 183] *  val_41;
 val_581 =  val_580 *  A[idx_off + 579];
 val_582 =  val_578 +  val_581;
 val_584 =  A[idx_off + 276] *  val_275;
 val_585 =  val_584 *  A[idx_off + 583];
 val_587 =  A[idx_off + 268] *  val_264;
 val_588 =  val_587 *  A[idx_off + 586];
 val_589 =  val_585 +  val_588;
 val_591 =  A[idx_off + 292] *  val_291;
 val_592 =  val_591 *  A[idx_off + 590];
 val_594 =  val_306 *  val_198;
 val_595 =  val_594 *  A[idx_off + 593];
 val_597 =  A[idx_off + 357] *  val_327;
 val_598 =  val_597 *  A[idx_off + 596];
 val_600 =  A[idx_off + 349] *  val_320;
 val_601 =  val_600 *  A[idx_off + 599];
 val_602 =  val_598 +  val_601;
 val_604 =  A[idx_off + 333] *  A[idx_off + 199];
 val_605 =  val_604 *  A[idx_off + 603];
 val_607 =  A[idx_off + 276] *  val_214;
 val_608 =  val_607 *  A[idx_off + 606];
 val_610 =  A[idx_off + 268] *  val_76;
 val_611 =  val_610 *  A[idx_off + 609];
 val_612 =  val_608 +  val_611;
 val_614 =  A[idx_off + 276] *  val_275;
 val_615 =  val_614 *  A[idx_off + 613];
 val_617 =  A[idx_off + 268] *  val_228;
 val_618 =  val_617 *  A[idx_off + 616];
 val_619 =  val_615 +  val_618;
 val_621 =  A[idx_off + 284] *  val_235;
 val_622 =  val_621 *  A[idx_off + 620];
 val_624 =  A[idx_off + 243] *  val_48;
 val_625 =  val_624 *  A[idx_off + 623];
 val_627 =  A[idx_off + 183] *  val_55;
 val_628 =  val_627 *  A[idx_off + 626];
 val_630 =  A[idx_off + 243] *  val_62;
 val_631 =  val_630 *  A[idx_off + 629];
 val_633 =  A[idx_off + 191] *  val_69;
 val_634 =  val_633 *  A[idx_off + 632];
 val_636 =  A[idx_off + 357] *  val_327;
 val_637 =  val_636 *  A[idx_off + 635];
 val_639 =  A[idx_off + 349] *  val_320;
 val_640 =  val_639 *  A[idx_off + 638];
 val_641 =  val_637 +  val_640;
 val_643 =  A[idx_off + 276] *  val_214;
 val_644 =  val_643 *  A[idx_off + 642];
 val_646 =  A[idx_off + 268] *  val_76;
 val_647 =  val_646 *  A[idx_off + 645];
 val_648 =  val_644 +  val_647;
 val_650 =  A[idx_off + 276] *  val_275;
 val_651 =  val_650 *  A[idx_off + 649];
 val_653 =  A[idx_off + 268] *  val_228;
 val_654 =  val_653 *  A[idx_off + 652];
 val_655 =  val_651 +  val_654;
 val_657 =  A[idx_off + 284] *  val_235;
 val_658 =  val_657 *  A[idx_off + 656];
 val_660 =  A[idx_off + 243] *  val_83;
 val_661 =  val_660 *  A[idx_off + 659];
 val_663 =  val_90 *  val_250;
 val_664 =  val_663 *  A[idx_off + 662];
 val_666 =  A[idx_off + 276] *  val_275;
 val_667 =  val_666 *  A[idx_off + 665];
 val_669 =  A[idx_off + 268] *  val_264;
 val_670 =  val_669 *  A[idx_off + 668];
 val_671 =  val_667 +  val_670;
 val_673 =  A[idx_off + 292] *  val_291;
 val_674 =  val_673 *  A[idx_off + 672];
 val_676 =  val_306 *  val_299;
 val_677 =  val_676 *  A[idx_off + 675];
 val_679 =  A[idx_off + 341] *  val_313;
 val_680 =  val_679 *  A[idx_off + 678];
 val_682 =  A[idx_off + 357] *  val_327;
 val_683 =  val_682 *  A[idx_off + 681];
 val_685 =  A[idx_off + 349] *  val_97;
 val_686 =  val_685 *  A[idx_off + 684];
 val_687 =  val_683 +  val_686;
 val_689 =  A[idx_off + 276] *  val_214;
 val_690 =  val_689 *  A[idx_off + 688];
 val_692 =  A[idx_off + 268] *  val_207;
 val_693 =  val_692 *  A[idx_off + 691];
 val_694 =  val_690 +  val_693;
 val_696 =  A[idx_off + 276] *  val_275;
 val_697 =  val_696 *  A[idx_off + 695];
 val_699 =  A[idx_off + 268] *  val_221;
 val_700 =  val_699 *  A[idx_off + 698];
 val_701 =  val_697 +  val_700;
 val_703 =  A[idx_off + 276] *  val_275;
 val_704 =  val_703 *  A[idx_off + 702];
 val_706 =  A[idx_off + 268] *  val_228;
 val_707 =  val_706 *  A[idx_off + 705];
 val_708 =  val_704 +  val_707;
 val_710 =  A[idx_off + 284] *  val_235;
 val_711 =  val_710 *  A[idx_off + 709];
 val_713 =  A[idx_off + 243] *  val_175;
 val_714 =  val_713 *  A[idx_off + 712];
 val_716 =  A[idx_off + 191] *  val_190;
 val_717 =  val_716 *  A[idx_off + 715];
 val_719 =  A[idx_off + 183] *  val_104;
 val_720 =  val_719 *  A[idx_off + 718];
 val_721 =  val_717 +  val_720;
 val_723 =  A[idx_off + 276] *  val_275;
 val_724 =  val_723 *  A[idx_off + 722];
 val_726 =  A[idx_off + 268] *  val_264;
 val_727 =  val_726 *  A[idx_off + 725];
 val_728 =  val_724 +  val_727;
 val_730 =  A[idx_off + 292] *  val_291;
 val_731 =  val_730 *  A[idx_off + 729];
 val_733 =  A[idx_off + 191] *  val_118;
 val_734 =  val_733 *  A[idx_off + 732];
 val_736 =  A[idx_off + 183] *  val_111;
 val_737 =  val_736 *  A[idx_off + 735];
 val_738 =  val_734 +  val_737;
 val_740 =  A[idx_off + 357] *  val_327;
 val_741 =  val_740 *  A[idx_off + 739];
 val_743 =  A[idx_off + 349] *  val_320;
 val_744 =  val_743 *  A[idx_off + 742];
 val_745 =  val_741 +  val_744;
 val_747 =  A[idx_off + 357] *  val_356;
 val_748 =  val_747 *  A[idx_off + 746];
 val_750 =  A[idx_off + 349] *  val_348;
 val_751 =  val_750 *  A[idx_off + 749];
 val_752 =  val_748 +  val_751;
 val_754 =  A[idx_off + 200] *  A[idx_off + 332];
 val_755 =  val_754 *  A[idx_off + 753];
 val_757 =  A[idx_off + 341] *  A[idx_off + 330];
 val_758 =  val_757 *  A[idx_off + 756];
 val_760 =  A[idx_off + 276] *  val_214;
 val_761 =  val_760 *  A[idx_off + 759];
 val_763 =  A[idx_off + 268] *  val_125;
 val_764 =  val_763 *  A[idx_off + 762];
 val_765 =  val_761 +  val_764;
 val_767 =  A[idx_off + 243] *  val_175;
 val_768 =  val_767 *  A[idx_off + 766];
 val_770 =  A[idx_off + 191] *  val_139;
 val_771 =  val_770 *  A[idx_off + 769];
 val_773 =  A[idx_off + 183] *  val_132;
 val_774 =  val_773 *  A[idx_off + 772];
 val_775 =  val_771 +  val_774;
 val_777 =  A[idx_off + 357] *  val_153;
 val_778 =  val_777 *  A[idx_off + 776];
 val_780 =  A[idx_off + 349] *  val_146;
 val_781 =  val_780 *  A[idx_off + 779];
 val_782 =  val_778 +  val_781;
 val_784 =  A[idx_off + 328] *  A[idx_off + 168];
 val_785 =  val_784 *  A[idx_off + 783];
 val_787 =  A[idx_off + 357] *  val_167;
 val_788 =  val_787 *  A[idx_off + 786];
 val_790 =  A[idx_off + 349] *  val_160;
 val_791 =  val_790 *  A[idx_off + 789];
 val_792 =  val_788 +  val_791;
 val_794 =  A[idx_off + 359] *  A[idx_off + 168];
 val_795 =  val_794 *  A[idx_off + 793];
 val_797 =  A[idx_off + 276] *  val_214;
 val_798 =  val_797 *  A[idx_off + 796];
 val_800 =  A[idx_off + 268] *  val_207;
 val_801 =  val_800 *  A[idx_off + 799];
 val_802 =  val_798 +  val_801;
 val_804 =  A[idx_off + 276] *  val_275;
 val_805 =  val_804 *  A[idx_off + 803];
 val_807 =  A[idx_off + 268] *  val_221;
 val_808 =  val_807 *  A[idx_off + 806];
 val_809 =  val_805 +  val_808;
 val_811 =  A[idx_off + 276] *  val_275;
 val_812 =  val_811 *  A[idx_off + 810];
 val_814 =  A[idx_off + 268] *  val_228;
 val_815 =  val_814 *  A[idx_off + 813];
 val_816 =  val_812 +  val_815;
 val_818 =  A[idx_off + 284] *  val_235;
 val_819 =  val_818 *  A[idx_off + 817];
 val_821 =  A[idx_off + 243] *  val_175;
 val_822 =  val_821 *  A[idx_off + 820];
 val_824 =  A[idx_off + 191] *  val_190;
 val_825 =  val_824 *  A[idx_off + 823];
 val_827 =  A[idx_off + 183] *  val_182;
 val_828 =  val_827 *  A[idx_off + 826];
 val_829 =  val_825 +  val_828;
 val_831 =  A[idx_off + 276] *  val_275;
 val_832 =  val_831 *  A[idx_off + 830];
 val_834 =  A[idx_off + 268] *  val_264;
 val_835 =  val_834 *  A[idx_off + 833];
 val_836 =  val_832 +  val_835;
 val_838 =  A[idx_off + 292] *  val_291;
 val_839 =  val_838 *  A[idx_off + 837];
 val_841 =  val_306 *  val_198;
 val_842 =  val_841 *  A[idx_off + 840];
 val_844 =  A[idx_off + 357] *  val_327;
 val_845 =  val_844 *  A[idx_off + 843];
 val_847 =  A[idx_off + 349] *  val_320;
 val_848 =  val_847 *  A[idx_off + 846];
 val_849 =  val_845 +  val_848;
 val_851 =  A[idx_off + 200] *  A[idx_off + 199];
 val_852 =  val_851 *  A[idx_off + 850];
 val_854 =  A[idx_off + 276] *  val_214;
 val_855 =  val_854 *  A[idx_off + 853];
 val_857 =  A[idx_off + 268] *  val_207;
 val_858 =  val_857 *  A[idx_off + 856];
 val_859 =  val_855 +  val_858;
 val_861 =  A[idx_off + 276] *  val_275;
 val_862 =  val_861 *  A[idx_off + 860];
 val_864 =  A[idx_off + 268] *  val_221;
 val_865 =  val_864 *  A[idx_off + 863];
 val_866 =  val_862 +  val_865;
 val_868 =  A[idx_off + 276] *  val_275;
 val_869 =  val_868 *  A[idx_off + 867];
 val_871 =  A[idx_off + 268] *  val_228;
 val_872 =  val_871 *  A[idx_off + 870];
 val_873 =  val_869 +  val_872;
 val_875 =  A[idx_off + 284] *  val_235;
 val_876 =  val_875 *  A[idx_off + 874];
 val_878 =  A[idx_off + 243] *  val_242;
 val_879 =  val_878 *  A[idx_off + 877];
 val_881 =  val_257 *  val_250;
 val_882 =  val_881 *  A[idx_off + 880];
 val_884 =  A[idx_off + 276] *  val_275;
 val_885 =  val_884 *  A[idx_off + 883];
 val_887 =  A[idx_off + 268] *  val_264;
 val_888 =  val_887 *  A[idx_off + 886];
 val_889 =  val_885 +  val_888;
 val_891 =  A[idx_off + 267] *  A[idx_off + 265];
 val_892 =  val_891 *  A[idx_off + 890];
 val_894 =  A[idx_off + 267] *  A[idx_off + 266];
 val_895 =  val_894 *  A[idx_off + 893];
 val_897 =  A[idx_off + 276] *  val_275;
 val_898 =  val_897 *  A[idx_off + 896];
 val_900 =  A[idx_off + 268] *  val_275;
 val_901 =  val_900 *  A[idx_off + 899];
 val_902 =  val_898 +  val_901;
 val_904 =  A[idx_off + 284] *  val_283;
 val_905 =  val_904 *  A[idx_off + 903];
 val_907 =  A[idx_off + 292] *  val_291;
 val_908 =  val_907 *  A[idx_off + 906];
 val_910 =  val_306 *  val_299;
 val_911 =  val_910 *  A[idx_off + 909];
 val_913 =  A[idx_off + 341] *  val_313;
 val_914 =  val_913 *  A[idx_off + 912];
 val_916 =  A[idx_off + 357] *  val_327;
 val_917 =  val_916 *  A[idx_off + 915];
 val_919 =  A[idx_off + 349] *  val_320;
 val_920 =  val_919 *  A[idx_off + 918];
 val_921 =  val_917 +  val_920;
 val_923 =  A[idx_off + 328] *  A[idx_off + 358];
 val_924 =  val_923 *  A[idx_off + 922];
 val_926 =  A[idx_off + 331] *  A[idx_off + 329];
 val_927 =  val_926 *  A[idx_off + 925];
 val_929 =  A[idx_off + 331] *  A[idx_off + 330];
 val_930 =  val_929 *  A[idx_off + 928];
 val_932 =  A[idx_off + 333] *  A[idx_off + 332];
 val_933 =  val_932 *  A[idx_off + 931];
 val_935 =  A[idx_off + 341] *  val_340;
 val_936 =  val_935 *  A[idx_off + 934];
 val_938 =  A[idx_off + 357] *  val_356;
 val_939 =  val_938 *  A[idx_off + 937];
 val_941 =  A[idx_off + 349] *  val_348;
 val_942 =  val_941 *  A[idx_off + 940];
 val_943 =  val_939 +  val_942;
 val_945 =  A[idx_off + 359] *  A[idx_off + 358];
 val_946 =  val_945 *  A[idx_off + 944];
 val_948 =  val_376 *  val_373;
 val_949 =  val_948 *  A[idx_off + 947];
 val_951 =  val_895 *  val_866;
 val_952 =  val_951 *  A[idx_off + 950];
 val_954 =  val_892 *  val_366;
 val_955 =  val_954 *  A[idx_off + 953];
 val_956 =  val_949 +  val_952;
 val_957 =  val_956 +  val_955;
 val_959 =  val_388 *  val_385;
 val_960 =  val_959 *  A[idx_off + 958];
 val_962 =  val_382 *  val_379;
 val_963 =  val_962 *  A[idx_off + 961];
 val_964 =  val_960 +  val_963;
 val_966 =  val_927 *  val_755;
 val_967 =  val_966 *  A[idx_off + 965];
 val_969 =  val_924 *  val_395;
 val_970 =  val_969 *  A[idx_off + 968];
 val_972 =  val_419 *  val_416;
 val_973 =  val_972 *  A[idx_off + 971];
 val_975 =  val_895 *  val_409;
 val_976 =  val_975 *  A[idx_off + 974];
 val_978 =  val_892 *  val_402;
 val_979 =  val_978 *  A[idx_off + 977];
 val_980 =  val_973 +  val_976;
 val_981 =  val_980 +  val_979;
 val_983 =  val_429 *  val_422;
 val_984 =  val_983 *  A[idx_off + 982];
 val_986 =  val_432 *  val_908;
 val_987 =  val_986 *  A[idx_off + 985];
 val_989 =  val_442 *  val_439;
 val_990 =  val_989 *  A[idx_off + 988];
 val_992 =  val_924 *  val_449;
 val_993 =  val_992 *  A[idx_off + 991];
 val_995 =  val_936 *  val_490;
 val_996 =  val_995 *  A[idx_off + 994];
 val_998 =  val_876 *  val_873;
 val_999 =  val_998 *  A[idx_off + 997];
 val_1001 =  val_895 *  val_866;
 val_1002 =  val_1001 *  A[idx_off + 1000];
 val_1004 =  val_892 *  val_456;
 val_1005 =  val_1004 *  A[idx_off + 1003];
 val_1006 =  val_999 +  val_1002;
 val_1007 =  val_1006 +  val_1005;
 val_1009 =  val_466 *  val_459;
 val_1010 =  val_1009 *  A[idx_off + 1008];
 val_1012 =  val_476 *  val_755;
 val_1013 =  val_1012 *  A[idx_off + 1011];
 val_1015 =  val_927 *  val_755;
 val_1016 =  val_1015 *  A[idx_off + 1014];
 val_1017 =  val_1013 +  val_1016;
 val_1019 =  val_785 *  val_473;
 val_1020 =  val_1019 *  A[idx_off + 1018];
 val_1022 =  val_476 *  val_755;
 val_1023 =  val_1022 *  A[idx_off + 1021];
 val_1025 =  val_927 *  val_755;
 val_1026 =  val_1025 *  A[idx_off + 1024];
 val_1027 =  val_1023 +  val_1026;
 val_1029 =  val_795 *  val_483;
 val_1030 =  val_1029 *  A[idx_off + 1028];
 val_1032 =  val_882 *  val_768;
 val_1033 =  val_1032 *  A[idx_off + 1031];
 val_1035 =  val_914 *  val_490;
 val_1036 =  val_1035 *  A[idx_off + 1034];
 val_1038 =  val_930 *  val_490;
 val_1039 =  val_1038 *  A[idx_off + 1037];
 val_1041 =  val_927 *  val_490;
 val_1042 =  val_1041 *  A[idx_off + 1040];
 val_1043 =  val_1036 +  val_1039;
 val_1044 =  val_1043 +  val_1042;
 val_1046 =  val_936 *  val_490;
 val_1047 =  val_1046 *  A[idx_off + 1045];
 val_1049 =  val_930 *  val_490;
 val_1050 =  val_1049 *  A[idx_off + 1048];
 val_1052 =  val_927 *  val_490;
 val_1053 =  val_1052 *  A[idx_off + 1051];
 val_1054 =  val_1047 +  val_1050;
 val_1055 =  val_1054 +  val_1053;
 val_1057 =  val_876 *  val_873;
 val_1058 =  val_1057 *  A[idx_off + 1056];
 val_1060 =  val_895 *  val_866;
 val_1061 =  val_1060 *  A[idx_off + 1059];
 val_1063 =  val_892 *  val_497;
 val_1064 =  val_1063 *  A[idx_off + 1062];
 val_1065 =  val_1058 +  val_1061;
 val_1066 =  val_1065 +  val_1064;
 val_1068 =  val_503 *  val_500;
 val_1069 =  val_1068 *  A[idx_off + 1067];
 val_1071 =  val_905 *  val_902;
 val_1072 =  val_1071 *  A[idx_off + 1070];
 val_1074 =  val_895 *  val_902;
 val_1075 =  val_1074 *  A[idx_off + 1073];
 val_1077 =  val_892 *  val_510;
 val_1078 =  val_1077 *  A[idx_off + 1076];
 val_1079 =  val_1072 +  val_1075;
 val_1080 =  val_1079 +  val_1078;
 val_1082 =  val_516 *  val_513;
 val_1083 =  val_1082 *  A[idx_off + 1081];
 val_1085 =  val_936 *  val_755;
 val_1086 =  val_1085 *  A[idx_off + 1084];
 val_1088 =  val_930 *  val_755;
 val_1089 =  val_1088 *  A[idx_off + 1087];
 val_1091 =  val_927 *  val_755;
 val_1092 =  val_1091 *  A[idx_off + 1090];
 val_1093 =  val_1086 +  val_1089;
 val_1094 =  val_1093 +  val_1092;
 val_1096 =  val_946 *  val_519;
 val_1097 =  val_1096 *  A[idx_off + 1095];
 val_1099 =  val_876 *  val_873;
 val_1100 =  val_1099 *  A[idx_off + 1098];
 val_1102 =  val_895 *  val_866;
 val_1103 =  val_1102 *  A[idx_off + 1101];
 val_1105 =  val_892 *  val_526;
 val_1106 =  val_1105 *  A[idx_off + 1104];
 val_1107 =  val_1100 +  val_1103;
 val_1108 =  val_1107 +  val_1106;
 val_1110 =  val_532 *  val_529;
 val_1111 =  val_1110 *  A[idx_off + 1109];
 val_1113 =  val_905 *  val_902;
 val_1114 =  val_1113 *  A[idx_off + 1112];
 val_1116 =  val_895 *  val_902;
 val_1117 =  val_1116 *  A[idx_off + 1115];
 val_1119 =  val_892 *  val_539;
 val_1120 =  val_1119 *  A[idx_off + 1118];
 val_1121 =  val_1114 +  val_1117;
 val_1122 =  val_1121 +  val_1120;
 val_1124 =  val_545 *  val_542;
 val_1125 =  val_1124 *  A[idx_off + 1123];
 val_1127 =  val_936 *  val_755;
 val_1128 =  val_1127 *  A[idx_off + 1126];
 val_1130 =  val_930 *  val_755;
 val_1131 =  val_1130 *  A[idx_off + 1129];
 val_1133 =  val_927 *  val_755;
 val_1134 =  val_1133 *  A[idx_off + 1132];
 val_1135 =  val_1128 +  val_1131;
 val_1136 =  val_1135 +  val_1134;
 val_1138 =  val_946 *  val_548;
 val_1139 =  val_1138 *  A[idx_off + 1137];
 val_1141 =  val_572 *  val_569;
 val_1142 =  val_1141 *  A[idx_off + 1140];
 val_1144 =  val_895 *  val_562;
 val_1145 =  val_1144 *  A[idx_off + 1143];
 val_1147 =  val_892 *  val_555;
 val_1148 =  val_1147 *  A[idx_off + 1146];
 val_1149 =  val_1142 +  val_1145;
 val_1150 =  val_1149 +  val_1148;
 val_1152 =  val_582 *  val_575;
 val_1153 =  val_1152 *  A[idx_off + 1151];
 val_1155 =  val_905 *  val_902;
 val_1156 =  val_1155 *  A[idx_off + 1154];
 val_1158 =  val_895 *  val_902;
 val_1159 =  val_1158 *  A[idx_off + 1157];
 val_1161 =  val_892 *  val_589;
 val_1162 =  val_1161 *  A[idx_off + 1160];
 val_1163 =  val_1156 +  val_1159;
 val_1164 =  val_1163 +  val_1162;
 val_1166 =  val_595 *  val_592;
 val_1167 =  val_1166 *  A[idx_off + 1165];
 val_1169 =  val_930 *  val_605;
 val_1170 =  val_1169 *  A[idx_off + 1168];
 val_1172 =  val_927 *  val_605;
 val_1173 =  val_1172 *  A[idx_off + 1171];
 val_1174 =  val_1170 +  val_1173;
 val_1176 =  val_924 *  val_602;
 val_1177 =  val_1176 *  A[idx_off + 1175];
 val_1179 =  val_930 *  val_605;
 val_1180 =  val_1179 *  A[idx_off + 1178];
 val_1182 =  val_927 *  val_605;
 val_1183 =  val_1182 *  A[idx_off + 1181];
 val_1184 =  val_1180 +  val_1183;
 val_1186 =  val_622 *  val_619;
 val_1187 =  val_1186 *  A[idx_off + 1185];
 val_1189 =  val_895 *  val_866;
 val_1190 =  val_1189 *  A[idx_off + 1188];
 val_1192 =  val_892 *  val_612;
 val_1193 =  val_1192 *  A[idx_off + 1191];
 val_1194 =  val_1187 +  val_1190;
 val_1195 =  val_1194 +  val_1193;
 val_1197 =  val_634 *  val_631;
 val_1198 =  val_1197 *  A[idx_off + 1196];
 val_1200 =  val_628 *  val_625;
 val_1201 =  val_1200 *  A[idx_off + 1199];
 val_1202 =  val_1198 +  val_1201;
 val_1204 =  val_930 *  val_755;
 val_1205 =  val_1204 *  A[idx_off + 1203];
 val_1207 =  val_924 *  val_641;
 val_1208 =  val_1207 *  A[idx_off + 1206];
 val_1210 =  val_658 *  val_655;
 val_1211 =  val_1210 *  A[idx_off + 1209];
 val_1213 =  val_895 *  val_866;
 val_1214 =  val_1213 *  A[idx_off + 1212];
 val_1216 =  val_892 *  val_648;
 val_1217 =  val_1216 *  A[idx_off + 1215];
 val_1218 =  val_1211 +  val_1214;
 val_1219 =  val_1218 +  val_1217;
 val_1221 =  val_664 *  val_661;
 val_1222 =  val_1221 *  A[idx_off + 1220];
 val_1224 =  val_905 *  val_902;
 val_1225 =  val_1224 *  A[idx_off + 1223];
 val_1227 =  val_895 *  val_902;
 val_1228 =  val_1227 *  A[idx_off + 1226];
 val_1230 =  val_892 *  val_671;
 val_1231 =  val_1230 *  A[idx_off + 1229];
 val_1232 =  val_1225 +  val_1228;
 val_1233 =  val_1232 +  val_1231;
 val_1235 =  val_677 *  val_674;
 val_1236 =  val_1235 *  A[idx_off + 1234];
 val_1238 =  val_680 *  val_755;
 val_1239 =  val_1238 *  A[idx_off + 1237];
 val_1241 =  val_924 *  val_687;
 val_1242 =  val_1241 *  A[idx_off + 1240];
 val_1244 =  val_711 *  val_708;
 val_1245 =  val_1244 *  A[idx_off + 1243];
 val_1247 =  val_895 *  val_701;
 val_1248 =  val_1247 *  A[idx_off + 1246];
 val_1250 =  val_892 *  val_694;
 val_1251 =  val_1250 *  A[idx_off + 1249];
 val_1252 =  val_1245 +  val_1248;
 val_1253 =  val_1252 +  val_1251;
 val_1255 =  val_721 *  val_714;
 val_1256 =  val_1255 *  A[idx_off + 1254];
 val_1258 =  val_905 *  val_902;
 val_1259 =  val_1258 *  A[idx_off + 1257];
 val_1261 =  val_895 *  val_902;
 val_1262 =  val_1261 *  A[idx_off + 1260];
 val_1264 =  val_892 *  val_728;
 val_1265 =  val_1264 *  A[idx_off + 1263];
 val_1266 =  val_1259 +  val_1262;
 val_1267 =  val_1266 +  val_1265;
 val_1269 =  val_738 *  val_731;
 val_1270 =  val_1269 *  A[idx_off + 1268];
 val_1272 =  val_924 *  val_745;
 val_1273 =  val_1272 *  A[idx_off + 1271];
 val_1275 =  val_927 *  val_852;
 val_1276 =  val_1275 *  A[idx_off + 1274];
 val_1278 =  val_946 *  val_752;
 val_1279 =  val_1278 *  A[idx_off + 1277];
 val_1281 =  val_758 *  val_755;
 val_1282 =  val_1281 *  A[idx_off + 1280];
 val_1284 =  val_930 *  val_755;
 val_1285 =  val_1284 *  A[idx_off + 1283];
 val_1286 =  val_1282 +  val_1285;
 val_1288 =  val_876 *  val_873;
 val_1289 =  val_1288 *  A[idx_off + 1287];
 val_1291 =  val_895 *  val_866;
 val_1292 =  val_1291 *  A[idx_off + 1290];
 val_1294 =  val_892 *  val_765;
 val_1295 =  val_1294 *  A[idx_off + 1293];
 val_1296 =  val_1289 +  val_1292;
 val_1297 =  val_1296 +  val_1295;
 val_1299 =  val_775 *  val_768;
 val_1300 =  val_1299 *  A[idx_off + 1298];
 val_1302 =  val_785 *  val_782;
 val_1303 =  val_1302 *  A[idx_off + 1301];
 val_1305 =  val_795 *  val_792;
 val_1306 =  val_1305 *  A[idx_off + 1304];
 val_1308 =  val_819 *  val_816;
 val_1309 =  val_1308 *  A[idx_off + 1307];
 val_1311 =  val_895 *  val_809;
 val_1312 =  val_1311 *  A[idx_off + 1310];
 val_1314 =  val_892 *  val_802;
 val_1315 =  val_1314 *  A[idx_off + 1313];
 val_1316 =  val_1309 +  val_1312;
 val_1317 =  val_1316 +  val_1315;
 val_1319 =  val_829 *  val_822;
 val_1320 =  val_1319 *  A[idx_off + 1318];
 val_1322 =  val_905 *  val_902;
 val_1323 =  val_1322 *  A[idx_off + 1321];
 val_1325 =  val_895 *  val_902;
 val_1326 =  val_1325 *  A[idx_off + 1324];
 val_1328 =  val_892 *  val_836;
 val_1329 =  val_1328 *  A[idx_off + 1327];
 val_1330 =  val_1323 +  val_1326;
 val_1331 =  val_1330 +  val_1329;
 val_1333 =  val_842 *  val_839;
 val_1334 =  val_1333 *  A[idx_off + 1332];
 val_1336 =  val_924 *  val_849;
 val_1337 =  val_1336 *  A[idx_off + 1335];
 val_1339 =  val_930 *  val_852;
 val_1340 =  val_1339 *  A[idx_off + 1338];
 val_1342 =  val_876 *  val_873;
 val_1343 =  val_1342 *  A[idx_off + 1341];
 val_1345 =  val_895 *  val_866;
 val_1346 =  val_1345 *  A[idx_off + 1344];
 val_1348 =  val_892 *  val_859;
 val_1349 =  val_1348 *  A[idx_off + 1347];
 val_1350 =  val_1343 +  val_1346;
 val_1351 =  val_1350 +  val_1349;
 val_1353 =  val_882 *  val_879;
 val_1354 =  val_1353 *  A[idx_off + 1352];
 val_1356 =  val_905 *  val_902;
 val_1357 =  val_1356 *  A[idx_off + 1355];
 val_1359 =  val_895 *  val_902;
 val_1360 =  val_1359 *  A[idx_off + 1358];
 val_1362 =  val_892 *  val_889;
 val_1363 =  val_1362 *  A[idx_off + 1361];
 val_1364 =  val_1357 +  val_1360;
 val_1365 =  val_1364 +  val_1363;
 val_1367 =  val_911 *  val_908;
 val_1368 =  val_1367 *  A[idx_off + 1366];
 val_1370 =  val_914 *  val_933;
 val_1371 =  val_1370 *  A[idx_off + 1369];
 val_1373 =  val_930 *  val_933;
 val_1374 =  val_1373 *  A[idx_off + 1372];
 val_1376 =  val_927 *  val_933;
 val_1377 =  val_1376 *  A[idx_off + 1375];
 val_1378 =  val_1371 +  val_1374;
 val_1379 =  val_1378 +  val_1377;
 val_1381 =  val_924 *  val_921;
 val_1382 =  val_1381 *  A[idx_off + 1380];
 val_1384 =  val_936 *  val_933;
 val_1385 =  val_1384 *  A[idx_off + 1383];
 val_1387 =  val_930 *  val_933;
 val_1388 =  val_1387 *  A[idx_off + 1386];
 val_1390 =  val_927 *  val_933;
 val_1391 =  val_1390 *  A[idx_off + 1389];
 val_1392 =  val_1385 +  val_1388;
 val_1393 =  val_1392 +  val_1391;
 val_1395 =  val_946 *  val_943;
 val_1396 =  val_1395 *  A[idx_off + 1394];
 val_1398 =  val_1368 *  val_1365;
 val_1399 =  val_1398 *  A[idx_off + 1397];
 val_1401 =  val_964 *  val_957;
 val_1402 =  val_1401 *  A[idx_off + 1400];
 val_1403 =  val_1399 +  val_1402;
 val_1405 =  val_970 *  val_967;
 val_1406 =  val_1405 *  A[idx_off + 1404];
 val_1408 =  val_987 *  val_1365;
 val_1409 =  val_1408 *  A[idx_off + 1407];
 val_1411 =  val_984 *  val_981;
 val_1412 =  val_1411 *  A[idx_off + 1410];
 val_1413 =  val_1409 +  val_1412;
 val_1415 =  val_1396 *  val_996;
 val_1416 =  val_1415 *  A[idx_off + 1414];
 val_1418 =  val_993 *  val_990;
 val_1419 =  val_1418 *  A[idx_off + 1417];
 val_1420 =  val_1416 +  val_1419;
 val_1422 =  val_1368 *  val_1365;
 val_1423 =  val_1422 *  A[idx_off + 1421];
 val_1425 =  val_1010 *  val_1007;
 val_1426 =  val_1425 *  A[idx_off + 1424];
 val_1427 =  val_1423 +  val_1426;
 val_1429 =  val_1030 *  val_1027;
 val_1430 =  val_1429 *  A[idx_off + 1428];
 val_1432 =  val_1020 *  val_1017;
 val_1433 =  val_1432 *  A[idx_off + 1431];
 val_1434 =  val_1430 +  val_1433;
 val_1436 =  val_1368 *  val_1365;
 val_1437 =  val_1436 *  A[idx_off + 1435];
 val_1439 =  val_1033 *  val_1297;
 val_1440 =  val_1439 *  A[idx_off + 1438];
 val_1441 =  val_1437 +  val_1440;
 val_1443 =  val_1306 *  val_1055;
 val_1444 =  val_1443 *  A[idx_off + 1442];
 val_1446 =  val_1303 *  val_1044;
 val_1447 =  val_1446 *  A[idx_off + 1445];
 val_1448 =  val_1444 +  val_1447;
 val_1450 =  val_1083 *  val_1080;
 val_1451 =  val_1450 *  A[idx_off + 1449];
 val_1453 =  val_1069 *  val_1066;
 val_1454 =  val_1453 *  A[idx_off + 1452];
 val_1455 =  val_1451 +  val_1454;
 val_1457 =  val_1097 *  val_1094;
 val_1458 =  val_1457 *  A[idx_off + 1456];
 val_1460 =  val_1125 *  val_1122;
 val_1461 =  val_1460 *  A[idx_off + 1459];
 val_1463 =  val_1111 *  val_1108;
 val_1464 =  val_1463 *  A[idx_off + 1462];
 val_1465 =  val_1461 +  val_1464;
 val_1467 =  val_1139 *  val_1136;
 val_1468 =  val_1467 *  A[idx_off + 1466];
 val_1470 =  val_1167 *  val_1164;
 val_1471 =  val_1470 *  A[idx_off + 1469];
 val_1473 =  val_1153 *  val_1150;
 val_1474 =  val_1473 *  A[idx_off + 1472];
 val_1475 =  val_1471 +  val_1474;
 val_1477 =  val_1396 *  val_1184;
 val_1478 =  val_1477 *  A[idx_off + 1476];
 val_1480 =  val_1177 *  val_1174;
 val_1481 =  val_1480 *  A[idx_off + 1479];
 val_1482 =  val_1478 +  val_1481;
 val_1484 =  val_1368 *  val_1365;
 val_1485 =  val_1484 *  A[idx_off + 1483];
 val_1487 =  val_1202 *  val_1195;
 val_1488 =  val_1487 *  A[idx_off + 1486];
 val_1489 =  val_1485 +  val_1488;
 val_1491 =  val_1208 *  val_1205;
 val_1492 =  val_1491 *  A[idx_off + 1490];
 val_1494 =  val_1236 *  val_1233;
 val_1495 =  val_1494 *  A[idx_off + 1493];
 val_1497 =  val_1222 *  val_1219;
 val_1498 =  val_1497 *  A[idx_off + 1496];
 val_1499 =  val_1495 +  val_1498;
 val_1501 =  val_1242 *  val_1239;
 val_1502 =  val_1501 *  A[idx_off + 1500];
 val_1504 =  val_1270 *  val_1267;
 val_1505 =  val_1504 *  A[idx_off + 1503];
 val_1507 =  val_1256 *  val_1253;
 val_1508 =  val_1507 *  A[idx_off + 1506];
 val_1509 =  val_1505 +  val_1508;
 val_1511 =  val_1279 *  val_1276;
 val_1512 =  val_1511 *  A[idx_off + 1510];
 val_1514 =  val_1273 *  val_1276;
 val_1515 =  val_1514 *  A[idx_off + 1513];
 val_1516 =  val_1512 +  val_1515;
 val_1518 =  val_1306 *  val_1286;
 val_1519 =  val_1518 *  A[idx_off + 1517];
 val_1521 =  val_1303 *  val_1286;
 val_1522 =  val_1521 *  A[idx_off + 1520];
 val_1523 =  val_1519 +  val_1522;
 val_1525 =  val_1368 *  val_1365;
 val_1526 =  val_1525 *  A[idx_off + 1524];
 val_1528 =  val_1300 *  val_1297;
 val_1529 =  val_1528 *  A[idx_off + 1527];
 val_1530 =  val_1526 +  val_1529;
 val_1532 =  val_1306 *  val_1393;
 val_1533 =  val_1532 *  A[idx_off + 1531];
 val_1535 =  val_1303 *  val_1379;
 val_1536 =  val_1535 *  A[idx_off + 1534];
 val_1537 =  val_1533 +  val_1536;
 val_1539 =  val_1334 *  val_1331;
 val_1540 =  val_1539 *  A[idx_off + 1538];
 val_1542 =  val_1320 *  val_1317;
 val_1543 =  val_1542 *  A[idx_off + 1541];
 val_1544 =  val_1540 +  val_1543;
 val_1546 =  val_1396 *  val_1340;
 val_1547 =  val_1546 *  A[idx_off + 1545];
 val_1549 =  val_1337 *  val_1340;
 val_1550 =  val_1549 *  A[idx_off + 1548];
 val_1551 =  val_1547 +  val_1550;
 val_1553 =  val_1368 *  val_1365;
 val_1554 =  val_1553 *  A[idx_off + 1552];
 val_1556 =  val_1354 *  val_1351;
 val_1557 =  val_1556 *  A[idx_off + 1555];
 val_1558 =  val_1554 +  val_1557;
 val_1560 =  val_1396 *  val_1393;
 val_1561 =  val_1560 *  A[idx_off + 1559];
 val_1563 =  val_1382 *  val_1379;
 val_1564 =  val_1563 *  A[idx_off + 1562];
 val_1565 =  val_1561 +  val_1564;
 val_1567 =  val_1523 *  val_1530;
 val_1568 =  val_1567 *  A[idx_off + 1566];
 val_1570 =  val_1565 *  val_1558;
 val_1571 =  val_1570 *  A[idx_off + 1569];
 val_1573 =  val_1502 *  val_1499;
 val_1574 =  val_1573 *  A[idx_off + 1572];
 val_1576 =  val_1468 *  val_1465;
 val_1577 =  val_1576 *  A[idx_off + 1575];
 val_1579 =  val_1482 *  val_1475;
 val_1580 =  val_1579 *  A[idx_off + 1578];
 val_1582 =  val_1406 *  val_1403;
 val_1583 =  val_1582 *  A[idx_off + 1581];
 val_1585 =  val_1420 *  val_1413;
 val_1586 =  val_1585 *  A[idx_off + 1584];
 val_1588 =  val_1448 *  val_1441;
 val_1589 =  val_1588 *  A[idx_off + 1587];
 val_1591 =  val_1492 *  val_1489;
 val_1592 =  val_1591 *  A[idx_off + 1590];
 val_1594 =  val_1434 *  val_1427;
 val_1595 =  val_1594 *  A[idx_off + 1593];
 val_1597 =  val_1458 *  val_1455;
 val_1598 =  val_1597 *  A[idx_off + 1596];
 val_1600 =  val_1516 *  val_1509;
 val_1601 =  val_1600 *  A[idx_off + 1599];
 val_1603 =  val_1551 *  val_1544;
 val_1604 =  val_1603 *  A[idx_off + 1602];
 val_1606 =  val_1537 *  val_1530;
 val_1607 =  val_1606 *  A[idx_off + 1605];
 val_1608 =  val_1568 +  val_1571;
 val_1609 =  val_1574 +  val_1577;
 val_1610 =  val_1580 +  val_1583;
 val_1611 =  val_1586 +  val_1589;
 val_1612 =  val_1592 +  val_1595;
 val_1613 =  val_1598 +  val_1601;
 val_1614 =  val_1604 +  val_1607;
 val_1615 =  val_1608 +  val_1609;
 val_1616 =  val_1610 +  val_1611;
 val_1617 =  val_1612 +  val_1613;
 val_1618 =  val_1615 +  val_1616;
 val_1619 =  val_1617 +  val_1614;
 val_1620 =  val_1618 +  val_1619;
 val_1625 =  A[idx_off + 1621] *  A[idx_off + 1622];
 val_1626 =  A[idx_off + 1623] *  A[idx_off + 1624];
 val_1627 =  val_1625 +  val_1626;
 val_1629 =  val_1627 *  val_1620;
 val_1630 =  val_1629 *  A[idx_off + 1628];
 A[idx_off] += val_1630;
    }
  A[i*n_inputs]= val_1630;
}

int 
main(void)
{
    // Error code to check return values for CUDA calls
    cudaError_t err = cudaSuccess;
    
//#define N_INPUTS 592
#define N_INPUTS 512
#define N_ARITH 1039
    const int n_inputs= N_INPUTS;
    const int n_arith= N_ARITH;
    const int batch_size= 1024;
    const int iter= 1;
    const int thresh= n_arith/3;

    //size_t size= batch_size * (n_inputs) * (iter) * sizeof(float);
    size_t size= batch_size * (n_inputs) * sizeof(float);
    size_t size_idx= n_arith * sizeof(int);

    float *h_A= (float *)malloc(size);
    int *h_B= (int *)malloc(size_idx);
    int *h_C= (int *)malloc(size_idx);
    int *h_op_sel= (int *) malloc(size_idx);
    
    // Initialize the host input vectors
    for (int i = 0; i < n_arith; ++i)
    {
        if (i < thresh) {
          h_B[i] = rand() % (n_inputs); 
          h_C[i] = rand() % (n_inputs);  
        }
        else{
          h_B[i] = rand() % (i); 
          h_C[i] = rand() % (i);  
        }
        h_op_sel[i]= rand() % 2;
    }
    
    for (int i= 0; i < n_inputs; ++i) {
      for (int b =0; b< batch_size; ++b) {
        //h_A[b* n_inputs + i]= float(rand());
        h_A[b* n_inputs + i]= 1;
      }
    }

    // Allocate the device input vector A
    float *d_A = NULL;
    err = cudaMalloc((void **)&d_A, size);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_B = NULL;
    err = cudaMalloc((void **)&d_B, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_C = NULL;
    err = cudaMalloc((void **)&d_C, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_op_sel = NULL;
    err = cudaMalloc((void **)&d_op_sel, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    // Copy the host input vectors A and B in host memory to the device input vectors in
    // device memory
    printf("Copy input data from the host memory to the CUDA device\n");
    err = cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector A from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_B, h_B, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector B from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_C, h_C, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_op_sel, h_op_sel, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    // Launch the Vector Add CUDA Kernel
    int threadsPerBlock = 32;
    int blocksPerGrid= (batch_size + threadsPerBlock -1)/ threadsPerBlock;
    struct timeval t1, t2;

    // Perform Warmup
    ac<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, d_op_sel, n_inputs, n_arith, thresh, iter);
    // FInish execution of kernel
    cudaDeviceSynchronize();
    
    gettimeofday(&t1, 0);

    printf("CUDA kernel launch with %d blocks of %d threads\n", blocksPerGrid, threadsPerBlock);
    ac<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, d_op_sel, n_inputs, n_arith, thresh, iter);

    // FInish execution of kernel
    cudaDeviceSynchronize();
    gettimeofday(&t2, 0);
    
    double time = (1000000.0*(t2.tv_sec-t1.tv_sec) + t2.tv_usec-t1.tv_usec)/1000.0;
    
    printf("Time of kernel:  %3.4f ms \n", time);

    err = cudaGetLastError();
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to launch vectorAdd kernel (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    printf("Throughput: %.3f Gops/sec, Batch: %d, nIter: %d, n_arith: %d\n", (((1.0*batch_size*iter*n_arith))/time)/1E6, batch_size, iter, n_arith);

    // Copy the device result vector in device memory to the host result vector
    // in host memory.
    printf("Copy output data from the CUDA device to the host memory\n");
    err = cudaMemcpy(h_A, d_A, size, cudaMemcpyDeviceToHost);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from device to host (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    
    //for (int i=0; i<numElements; i++) {
    for (int i=0; i<32; i++) {
      printf("%d : %f,", i, h_A[i*n_inputs]);
    }

    err = cudaFree(d_A);
    err = cudaFree(d_B);
    err = cudaFree(d_C);

    free(h_A);
    free(h_B);
    free(h_C);

    printf("Done!\n");
    return 0;
}
