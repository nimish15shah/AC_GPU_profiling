
#include <stdio.h>
#include <stdlib.h>
// For the CUDA runtime routines (prefixed with "cuda_")
#include <cuda_runtime.h>
#include <sys/time.h>
#include <cooperative_groups.h>


__global__ void
ac(float *A, const int *B, const int *C, const int *op_sel, int n_inputs, const int n_arith, int thresh, int iter) {
  int i= blockDim.x * blockIdx.x + threadIdx.x;
  
  int idx_off= i*n_inputs;
  
  float val_146, val_147, val_148, val_149, val_150, val_151, val_152, val_153, val_154, val_155, val_156, val_157, val_158, val_159, val_160, val_161, val_162, val_163, val_164, val_165, val_166, val_167, val_168, val_169, val_170, val_171, val_172, val_173, val_174, val_175, val_176, val_177, val_178, val_179, val_180, val_181, val_182, val_183, val_184, val_185, val_186, val_187, val_188, val_189, val_190, val_191, val_192, val_193, val_194, val_195, val_196, val_197, val_198, val_199, val_200, val_201, val_202, val_203, val_204, val_205, val_206, val_207, val_208, val_209, val_210, val_211, val_212, val_213, val_214, val_215, val_216, val_217, val_218, val_219, val_220, val_221, val_222, val_223, val_224, val_225, val_226, val_227, val_228, val_229, val_230, val_231, val_232, val_233, val_234, val_235, val_236, val_237, val_238, val_239, val_240, val_241, val_242, val_243, val_244, val_245, val_246, val_247, val_248, val_249, val_250, val_251, val_252, val_253, val_254, val_255, val_256, val_257, val_258, val_259, val_260, val_261, val_262, val_263, val_264, val_265, val_266, val_267, val_268, val_269, val_270, val_271, val_272, val_273, val_274, val_275, val_276, val_277, val_278, val_279, val_280, val_281, val_282, val_283, val_284, val_285, val_286, val_287, val_288, val_289, val_290, val_291, val_292, val_293, val_294, val_295, val_296, val_297, val_298, val_299, val_300, val_301, val_302, val_303, val_304, val_305, val_306, val_307, val_308, val_309, val_310, val_311, val_312, val_313, val_314, val_315, val_316, val_317, val_318, val_319, val_320, val_321, val_322, val_323, val_324, val_325, val_326, val_327, val_328, val_329, val_330, val_331, val_332, val_333, val_334, val_335, val_336, val_337, val_338, val_339, val_340, val_341, val_342, val_343, val_344, val_345, val_346, val_347, val_348, val_349, val_350, val_351, val_352, val_353, val_354, val_355, val_356, val_357, val_358, val_359, val_360, val_361, val_362, val_363, val_364, val_365, val_366, val_367, val_368, val_369, val_370, val_371, val_372, val_373, val_374, val_375, val_376, val_377, val_378, val_379, val_380, val_381, val_382, val_383, val_384, val_385, val_386, val_387, val_388, val_389, val_390, val_391, val_392, val_393, val_394, val_395, val_396, val_397, val_398, val_399, val_400, val_401, val_402, val_403, val_404, val_405, val_406, val_407, val_408, val_409, val_410, val_411, val_412, val_413, val_414, val_415, val_416, val_417, val_418, val_419, val_420, val_421, val_422, val_423, val_424, val_425, val_426, val_427, val_428, val_429, val_430, val_431, val_432, val_433, val_434, val_435, val_436, val_437, val_438, val_439, val_440, val_441, val_442, val_443, val_444, val_445, val_446, val_447, val_448, val_449, val_450, val_451, val_452, val_453, val_454, val_455, val_456, val_457, val_458, val_459, val_460, val_461, val_462, val_463, val_464, val_465, val_466, val_467, val_468, val_469, val_470, val_471, val_472, val_473, val_474, val_475, val_476, val_477, val_478, val_479, val_480, val_481, val_482, val_483, val_484, val_485, val_486, val_487, val_488, val_489, val_490, val_491, val_492, val_493, val_494, val_495, val_496, val_497, val_498, val_499, val_500, val_501, val_502, val_503, val_504, val_505, val_506, val_507, val_508, val_509, val_510, val_511, val_512, val_513, val_514, val_515, val_516, val_517, val_518, val_519, val_520, val_521, val_522, val_523, val_524, val_525, val_526, val_527, val_528, val_529, val_530, val_531, val_532, val_533, val_534, val_535, val_536, val_537, val_538, val_539, val_540, val_541, val_542, val_543, val_544, val_545, val_546, val_547, val_548, val_549, val_550, val_551, val_552, val_553, val_554, val_555, val_556, val_557, val_558, val_559, val_560, val_561, val_562, val_563, val_564, val_565, val_566, val_567, val_568, val_569, val_570, val_571, val_572, val_573, val_574, val_575, val_576, val_577, val_578, val_579, val_580, val_581, val_582, val_583, val_584, val_585, val_586, val_587, val_588, val_589, val_590, val_591, val_592, val_593, val_594, val_595, val_596, val_597, val_598, val_599, val_600, val_601, val_602, val_603, val_604, val_605, val_606, val_607, val_608, val_609, val_610, val_611, val_612, val_613, val_614, val_615, val_616, val_617, val_618, val_619, val_620, val_621, val_622, val_623, val_624, val_625, val_626, val_627, val_628, val_629, val_630, val_631, val_632, val_633, val_634, val_635, val_636, val_637, val_638, val_639, val_640, val_641, val_642, val_643, val_644, val_645, val_646, val_647, val_648, val_649, val_650, val_651, val_652, val_653, val_654, val_655, val_656, val_657, val_658, val_659, val_660, val_661, val_662, val_663, val_664, val_665, val_666, val_667, val_668, val_669, val_670, val_671, val_672, val_673, val_674, val_675, val_676, val_677, val_678, val_679, val_680, val_681, val_682, val_683, val_684, val_685, val_686, val_687, val_688, val_689, val_690, val_691, val_692, val_693, val_694, val_695, val_696, val_697, val_698, val_699, val_700, val_701, val_702, val_703, val_704, val_705, val_706, val_707, val_708, val_709, val_710, val_711, val_712, val_713, val_714, val_715, val_716, val_717, val_718, val_719, val_720, val_721, val_722, val_723, val_724, val_725, val_726, val_727, val_728, val_729, val_730, val_731, val_732, val_733, val_734, val_735, val_736, val_737, val_738, val_739, val_740, val_741, val_742, val_743, val_744, val_745, val_746, val_747, val_748, val_749, val_750, val_751, val_752, val_753, val_754, val_755, val_756, val_757, val_758, val_759, val_760, val_761, val_762, val_763, val_764, val_765, val_766, val_767, val_768, val_769, val_770, val_771, val_772, val_773, val_774, val_775, val_776, val_777, val_778, val_779, val_780, val_781, val_782, val_783, val_784, val_785, val_786, val_787, val_788, val_789, val_790, val_791, val_792, val_793, val_794, val_795, val_796, val_797, val_798, val_799, val_800, val_801, val_802, val_803, val_804, val_805, val_806, val_807, val_808, val_809, val_810, val_811, val_812, val_813, val_814, val_815, val_816, val_817, val_818, val_819, val_820, val_821, val_822, val_823, val_824, val_825, val_826, val_827, val_828, val_829, val_830, val_831, val_832, val_833, val_834, val_835, val_836, val_837, val_838, val_839, val_840, val_841, val_842, val_843, val_844, val_845, val_846, val_847, val_848, val_849, val_850, val_851, val_852, val_853, val_854, val_855, val_856, val_857, val_858, val_859, val_860, val_861, val_862, val_863, val_864, val_865, val_866, val_867, val_868, val_869, val_870, val_871, val_872, val_873, val_874, val_875, val_876, val_877, val_878, val_879, val_880, val_881, val_882, val_883, val_884, val_885, val_886, val_887, val_888, val_889, val_890, val_891, val_892, val_893, val_894, val_895, val_896, val_897, val_898, val_899, val_900, val_901, val_902, val_903, val_904, val_905, val_906, val_907, val_908, val_909, val_910, val_911, val_912, val_913, val_914, val_915, val_916, val_917, val_918, val_919, val_920, val_921, val_922, val_923, val_924, val_925, val_926, val_927, val_928, val_929, val_930, val_931, val_932, val_933, val_934, val_935, val_936, val_937, val_938, val_939, val_940, val_941, val_942, val_943, val_944, val_945, val_946, val_947, val_948, val_949, val_950, val_951, val_952, val_953, val_954, val_955, val_956, val_957, val_958, val_959, val_960, val_961, val_962, val_963, val_964, val_965, val_966, val_967, val_968, val_969, val_970, val_971, val_972, val_973, val_974, val_975, val_976, val_977, val_978, val_979, val_980, val_981, val_982, val_983, val_984, val_985, val_986, val_987, val_988, val_989, val_990, val_991, val_992, val_993, val_994, val_995, val_996, val_997, val_998, val_999, val_1000, val_1001, val_1002, val_1003, val_1004, val_1005, val_1006, val_1007, val_1008, val_1009, val_1010, val_1011, val_1012, val_1013, val_1014, val_1015, val_1016, val_1017, val_1018, val_1019, val_1020, val_1021, val_1022, val_1023, val_1024, val_1025, val_1026, val_1027, val_1028, val_1029, val_1030, val_1031, val_1032, val_1033, val_1034, val_1035, val_1036, val_1037, val_1038, val_1039, val_1040, val_1041, val_1042, val_1043, val_1044, val_1045, val_1046, val_1047, val_1048, val_1049, val_1050, val_1051, val_1052, val_1053, val_1054, val_1055, val_1056, val_1057, val_1058, val_1059, val_1060, val_1061, val_1062, val_1063, val_1064, val_1065, val_1066, val_1067, val_1068, val_1069, val_1070, val_1071, val_1072, val_1073, val_1074, val_1075, val_1076, val_1077, val_1078, val_1079, val_1080, val_1081, val_1082, val_1083, val_1084, val_1085, val_1086, val_1087, val_1088, val_1089, val_1090, val_1091, val_1092, val_1093, val_1094, val_1095, val_1096, val_1097, val_1098, val_1099, val_1100, val_1101, val_1102, val_1103, val_1104, val_1105, val_1106, val_1107, val_1108, val_1109, val_1110, val_1111, val_1112, val_1113, val_1114, val_1115, val_1116, val_1117, val_1118, val_1119, val_1120, val_1121, val_1122, val_1123, val_1124, val_1125, val_1126, val_1127, val_1128, val_1129, val_1130, val_1131, val_1132, val_1133, val_1134, val_1135, val_1136, val_1137, val_1138, val_1139, val_1140, val_1141, val_1142, val_1143, val_1144, val_1145, val_1146, val_1147, val_1148, val_1149, val_1150, val_1151, val_1152, val_1153, val_1154, val_1155, val_1156, val_1157, val_1158, val_1159, val_1160, val_1161, val_1162, val_1163, val_1164, val_1165, val_1166, val_1167, val_1168, val_1169, val_1170, val_1171, val_1172, val_1173, val_1174, val_1175, val_1176, val_1177, val_1178, val_1179, val_1180, val_1181, val_1182, val_1183, val_1184, val_1185, val_1186, val_1187, val_1188, val_1189, val_1190, val_1191, val_1192, val_1193, val_1194, val_1195, val_1196, val_1197, val_1198, val_1199, val_1200, val_1201, val_1202, val_1203, val_1204, val_1205, val_1206, val_1207, val_1208, val_1209, val_1210, val_1211, val_1212, val_1213, val_1214, val_1215, val_1216, val_1217, val_1218, val_1219, val_1220, val_1221, val_1222, val_1223, val_1224, val_1225, val_1226, val_1227, val_1228, val_1229, val_1230, val_1231, val_1232, val_1233, val_1234, val_1235, val_1236, val_1237, val_1238, val_1239, val_1240, val_1241, val_1242, val_1243, val_1244, val_1245, val_1246, val_1247, val_1248, val_1249, val_1250, val_1251, val_1252, val_1253, val_1254, val_1255, val_1256, val_1257, val_1258, val_1259, val_1260, val_1261, val_1262, val_1263, val_1264, val_1265, val_1266, val_1267, val_1268, val_1269, val_1270, val_1271, val_1272, val_1273, val_1274, val_1275, val_1276, val_1277, val_1278, val_1279, val_1280, val_1281, val_1282, val_1283, val_1284, val_1285, val_1286, val_1287, val_1288, val_1289, val_1290, val_1291, val_1292, val_1293, val_1294, val_1295, val_1296, val_1297, val_1298, val_1299, val_1300, val_1301, val_1302, val_1303, val_1304, val_1305, val_1306, val_1307, val_1308, val_1309, val_1310, val_1311, val_1312, val_1313, val_1314, val_1315, val_1316, val_1317, val_1318, val_1319, val_1320, val_1321, val_1322, val_1323, val_1324, val_1325, val_1326, val_1327, val_1328, val_1329, val_1330, val_1331, val_1332, val_1333, val_1334, val_1335, val_1336, val_1337, val_1338, val_1339, val_1340, val_1341, val_1342, val_1343, val_1344, val_1345, val_1346, val_1347, val_1348, val_1349, val_1350, val_1351, val_1352, val_1353, val_1354, val_1355, val_1356, val_1357, val_1358, val_1359, val_1360, val_1361, val_1362, val_1363, val_1364, val_1365, val_1366, val_1367, val_1368, val_1369, val_1370, val_1371, val_1372, val_1373, val_1374, val_1375, val_1376, val_1377, val_1378, val_1379, val_1380, val_1381, val_1382, val_1383, val_1384, val_1385, val_1386, val_1387, val_1388, val_1389, val_1390, val_1391, val_1392, val_1393, val_1394, val_1395, val_1396, val_1397, val_1398, val_1399, val_1400, val_1401, val_1402, val_1403, val_1404, val_1405, val_1406, val_1407, val_1408, val_1409, val_1410, val_1411, val_1412, val_1413, val_1414, val_1415, val_1416, val_1417, val_1418, val_1419, val_1420, val_1421, val_1422, val_1423, val_1424, val_1425, val_1426, val_1427, val_1428, val_1429, val_1430, val_1431, val_1432, val_1433, val_1434, val_1435, val_1436, val_1437, val_1438, val_1439, val_1440, val_1441, val_1442, val_1443, val_1444, val_1445, val_1446, val_1447, val_1448, val_1449, val_1450, val_1451, val_1452, val_1453, val_1454, val_1455, val_1456, val_1457, val_1458, val_1459, val_1460, val_1461, val_1462, val_1463, val_1464, val_1465, val_1466, val_1467, val_1468, val_1469, val_1470, val_1471, val_1472, val_1473, val_1474, val_1475, val_1476, val_1477, val_1478, val_1479, val_1480, val_1481, val_1482, val_1483, val_1484, val_1485, val_1486, val_1487, val_1488, val_1489, val_1490, val_1491, val_1492, val_1493, val_1494, val_1495, val_1496, val_1497, val_1498, val_1499, val_1500, val_1501, val_1502, val_1503, val_1504, val_1505, val_1506, val_1507, val_1508, val_1509, val_1510, val_1511, val_1512, val_1513, val_1514, val_1515, val_1516, val_1517, val_1518, val_1519, val_1520, val_1521, val_1522, val_1523, val_1524, val_1525, val_1526, val_1527, val_1528, val_1529, val_1530, val_1531, val_1532, val_1533, val_1534, val_1535, val_1536, val_1537, val_1538, val_1539, val_1540, val_1541, val_1542, val_1543, val_1544, val_1545, val_1546, val_1547, val_1548, val_1549, val_1550, val_1551, val_1552, val_1553, val_1554, val_1555, val_1556, val_1557, val_1558, val_1559, val_1560, val_1561, val_1562, val_1563, val_1564, val_1565, val_1566, val_1567, val_1568, val_1569;
  
  for (int k=0; k<iter; k++) {
    idx_off = i*(n_inputs * iter) + n_inputs*k; 
 val_146 =  A[idx_off + 3] *  A[idx_off + 69];
 val_147 =  A[idx_off + 0] *  A[idx_off + 69];
 val_148 =  A[idx_off + 2] *  A[idx_off + 70];
 val_149 =  A[idx_off + 1] *  A[idx_off + 70];
 val_150 =  val_146 +  val_148;
 val_151 =  val_147 +  val_149;
 val_152 =  A[idx_off + 0] *  A[idx_off + 104];
 val_153 =  A[idx_off + 4] *  A[idx_off + 104];
 val_154 =  A[idx_off + 16] *  A[idx_off + 105];
 val_155 =  A[idx_off + 3] *  A[idx_off + 105];
 val_156 =  A[idx_off + 7] *  A[idx_off + 106];
 val_157 =  A[idx_off + 4] *  A[idx_off + 106];
 val_158 =  val_152 +  val_154;
 val_159 =  val_153 +  val_155;
 val_160 =  val_156 +  val_158;
 val_161 =  val_157 +  val_159;
 val_162 =  A[idx_off + 0] *  A[idx_off + 41];
 val_163 =  A[idx_off + 1] *  A[idx_off + 42];
 val_164 =  A[idx_off + 12] *  val_162;
 val_165 =  A[idx_off + 0] *  val_162;
 val_166 =  A[idx_off + 13] *  val_163;
 val_167 =  A[idx_off + 14] *  val_163;
 val_168 =  val_164 +  val_166;
 val_169 =  val_165 +  val_167;
 val_170 =  val_165 +  val_166;
 val_171 =  A[idx_off + 5] *  A[idx_off + 54];
 val_172 =  A[idx_off + 8] *  A[idx_off + 54];
 val_173 =  A[idx_off + 0] *  A[idx_off + 54];
 val_174 =  A[idx_off + 8] *  A[idx_off + 55];
 val_175 =  A[idx_off + 5] *  A[idx_off + 55];
 val_176 =  A[idx_off + 17] *  A[idx_off + 55];
 val_177 =  A[idx_off + 0] *  A[idx_off + 56];
 val_178 =  A[idx_off + 18] *  A[idx_off + 56];
 val_179 =  val_171 +  val_174;
 val_180 =  val_172 +  val_175;
 val_181 =  val_173 +  val_176;
 val_182 =  val_177 +  val_179;
 val_183 =  val_177 +  val_180;
 val_184 =  val_178 +  val_181;
 val_185 =  A[idx_off + 5] *  A[idx_off + 107];
 val_186 =  A[idx_off + 8] *  A[idx_off + 108];
 val_187 =  A[idx_off + 0] *  A[idx_off + 109];
 val_188 =  A[idx_off + 8] *  A[idx_off + 107];
 val_189 =  A[idx_off + 5] *  A[idx_off + 108];
 val_190 =  A[idx_off + 0] *  A[idx_off + 107];
 val_191 =  A[idx_off + 5] *  A[idx_off + 109];
 val_192 =  val_185 +  val_186;
 val_193 =  val_187 +  val_192;
 val_194 =  val_188 +  val_189;
 val_195 =  val_187 +  val_194;
 val_196 =  val_186 +  val_190;
 val_197 =  val_191 +  val_196;
 val_198 =  A[idx_off + 92] *  val_182;
 val_199 =  A[idx_off + 93] *  val_183;
 val_200 =  A[idx_off + 94] *  val_184;
 val_201 =  val_193 *  val_198;
 val_202 =  val_195 *  val_199;
 val_203 =  val_197 *  val_200;
 val_204 =  A[idx_off + 5] *  val_201;
 val_205 =  A[idx_off + 0] *  val_201;
 val_206 =  A[idx_off + 8] *  val_202;
 val_207 =  A[idx_off + 15] *  val_202;
 val_208 =  A[idx_off + 0] *  val_203;
 val_209 =  A[idx_off + 3] *  val_203;
 val_210 =  A[idx_off + 12] *  val_201;
 val_211 =  A[idx_off + 4] *  val_201;
 val_212 =  A[idx_off + 0] *  val_202;
 val_213 =  A[idx_off + 3] *  val_202;
 val_214 =  A[idx_off + 4] *  val_203;
 val_215 =  val_204 +  val_206;
 val_216 =  val_205 +  val_207;
 val_217 =  val_208 +  val_215;
 val_218 =  val_209 +  val_216;
 val_219 =  val_210 +  val_212;
 val_220 =  val_211 +  val_213;
 val_221 =  val_208 +  val_219;
 val_222 =  val_214 +  val_220;
 val_223 =  A[idx_off + 4] *  A[idx_off + 95];
 val_224 =  A[idx_off + 5] *  A[idx_off + 96];
 val_225 =  val_150 *  val_223;
 val_226 =  val_151 *  val_224;
 val_227 =  val_217 *  val_225;
 val_228 =  val_218 *  val_226;
 val_229 =  val_221 *  val_225;
 val_230 =  val_222 *  val_226;
 val_231 =  A[idx_off + 12] *  val_227;
 val_232 =  A[idx_off + 0] *  val_227;
 val_233 =  A[idx_off + 20] *  val_228;
 val_234 =  A[idx_off + 21] *  val_228;
 val_235 =  A[idx_off + 0] *  val_228;
 val_236 =  A[idx_off + 5] *  val_229;
 val_237 =  A[idx_off + 8] *  val_229;
 val_238 =  A[idx_off + 0] *  val_229;
 val_239 =  A[idx_off + 4] *  val_230;
 val_240 =  A[idx_off + 3] *  val_230;
 val_241 =  val_231 +  val_233;
 val_242 =  val_232 +  val_234;
 val_243 =  val_232 +  val_235;
 val_244 =  val_236 +  val_239;
 val_245 =  val_237 +  val_240;
 val_246 =  val_238 +  val_239;
 val_247 =  A[idx_off + 6] *  A[idx_off + 83];
 val_248 =  A[idx_off + 7] *  A[idx_off + 84];
 val_249 =  val_241 *  val_247;
 val_250 =  val_242 *  val_247;
 val_251 =  val_243 *  val_247;
 val_252 =  val_244 *  val_248;
 val_253 =  val_245 *  val_248;
 val_254 =  val_246 *  val_248;
 val_255 =  val_249 +  val_252;
 val_256 =  val_250 +  val_253;
 val_257 =  val_251 +  val_254;
 val_258 =  A[idx_off + 0] *  A[idx_off + 114];
 val_259 =  A[idx_off + 1] *  A[idx_off + 115];
 val_260 =  val_160 *  val_258;
 val_261 =  val_161 *  val_259;
 val_262 =  A[idx_off + 2] *  val_260;
 val_263 =  A[idx_off + 3] *  val_260;
 val_264 =  A[idx_off + 5] *  val_261;
 val_265 =  A[idx_off + 4] *  val_261;
 val_266 =  A[idx_off + 0] *  val_260;
 val_267 =  A[idx_off + 1] *  val_260;
 val_268 =  val_262 +  val_264;
 val_269 =  val_263 +  val_265;
 val_270 =  val_265 +  val_266;
 val_271 =  val_264 +  val_267;
 val_272 =  A[idx_off + 4] *  A[idx_off + 101];
 val_273 =  A[idx_off + 3] *  A[idx_off + 102];
 val_274 =  A[idx_off + 4] *  A[idx_off + 103];
 val_275 =  A[idx_off + 4] *  val_272;
 val_276 =  A[idx_off + 19] *  val_272;
 val_277 =  A[idx_off + 0] *  val_272;
 val_278 =  A[idx_off + 4] *  val_273;
 val_279 =  A[idx_off + 0] *  val_273;
 val_280 =  A[idx_off + 19] *  val_273;
 val_281 =  A[idx_off + 4] *  val_274;
 val_282 =  A[idx_off + 0] *  val_274;
 val_283 =  A[idx_off + 19] *  val_274;
 val_284 =  val_275 +  val_278;
 val_285 =  val_276 +  val_279;
 val_286 =  val_277 +  val_280;
 val_287 =  val_277 +  val_279;
 val_288 =  val_281 +  val_284;
 val_289 =  val_282 +  val_285;
 val_290 =  val_282 +  val_286;
 val_291 =  val_283 +  val_287;
 val_292 =  A[idx_off + 22] *  A[idx_off + 80];
 val_293 =  A[idx_off + 22] *  A[idx_off + 81];
 val_294 =  A[idx_off + 22] *  A[idx_off + 82];
 val_295 =  A[idx_off + 0] *  A[idx_off + 80];
 val_296 =  A[idx_off + 12] *  A[idx_off + 81];
 val_297 =  A[idx_off + 0] *  A[idx_off + 82];
 val_298 =  A[idx_off + 12] *  A[idx_off + 80];
 val_299 =  A[idx_off + 0] *  A[idx_off + 81];
 val_300 =  A[idx_off + 12] *  A[idx_off + 82];
 val_301 =  val_292 +  val_293;
 val_302 =  val_294 +  val_301;
 val_303 =  val_295 +  val_296;
 val_304 =  val_297 +  val_303;
 val_305 =  val_298 +  val_299;
 val_306 =  val_297 +  val_305;
 val_307 =  val_295 +  val_299;
 val_308 =  val_300 +  val_307;
 val_309 =  A[idx_off + 4] *  A[idx_off + 61];
 val_310 =  A[idx_off + 5] *  A[idx_off + 62];
 val_311 =  A[idx_off + 12] *  val_309;
 val_312 =  A[idx_off + 0] *  val_309;
 val_313 =  A[idx_off + 13] *  val_309;
 val_314 =  A[idx_off + 14] *  val_309;
 val_315 =  A[idx_off + 14] *  val_310;
 val_316 =  A[idx_off + 23] *  val_310;
 val_317 =  A[idx_off + 0] *  val_310;
 val_318 =  A[idx_off + 12] *  val_310;
 val_319 =  val_311 +  val_315;
 val_320 =  val_312 +  val_316;
 val_321 =  val_312 +  val_317;
 val_322 =  val_313 +  val_318;
 val_323 =  val_314 +  val_317;
 val_324 =  val_313 +  val_317;
 val_325 =  val_311 +  val_317;
 val_326 =  val_312 +  val_318;
 val_327 =  A[idx_off + 74] *  val_319;
 val_328 =  A[idx_off + 75] *  val_320;
 val_329 =  A[idx_off + 76] *  val_321;
 val_330 =  A[idx_off + 74] *  val_322;
 val_331 =  A[idx_off + 75] *  val_323;
 val_332 =  A[idx_off + 76] *  val_324;
 val_333 =  A[idx_off + 74] *  val_321;
 val_334 =  A[idx_off + 75] *  val_325;
 val_335 =  A[idx_off + 76] *  val_326;
 val_336 =  val_327 +  val_328;
 val_337 =  val_329 +  val_336;
 val_338 =  val_330 +  val_331;
 val_339 =  val_332 +  val_338;
 val_340 =  val_333 +  val_334;
 val_341 =  val_335 +  val_340;
 val_342 =  A[idx_off + 22] *  A[idx_off + 77];
 val_343 =  A[idx_off + 22] *  A[idx_off + 78];
 val_344 =  A[idx_off + 22] *  A[idx_off + 79];
 val_345 =  A[idx_off + 0] *  A[idx_off + 77];
 val_346 =  A[idx_off + 12] *  A[idx_off + 78];
 val_347 =  A[idx_off + 0] *  A[idx_off + 79];
 val_348 =  A[idx_off + 12] *  A[idx_off + 77];
 val_349 =  A[idx_off + 0] *  A[idx_off + 78];
 val_350 =  A[idx_off + 12] *  A[idx_off + 79];
 val_351 =  val_342 +  val_343;
 val_352 =  val_344 +  val_351;
 val_353 =  val_345 +  val_346;
 val_354 =  val_347 +  val_353;
 val_355 =  val_348 +  val_349;
 val_356 =  val_347 +  val_355;
 val_357 =  val_345 +  val_349;
 val_358 =  val_350 +  val_357;
 val_359 =  A[idx_off + 2] *  A[idx_off + 59];
 val_360 =  A[idx_off + 3] *  A[idx_off + 60];
 val_361 =  val_302 *  val_359;
 val_362 =  val_304 *  val_359;
 val_363 =  val_302 *  val_360;
 val_364 =  val_306 *  val_360;
 val_365 =  val_308 *  val_360;
 val_366 =  val_352 *  val_361;
 val_367 =  val_354 *  val_362;
 val_368 =  val_352 *  val_363;
 val_369 =  val_356 *  val_364;
 val_370 =  val_358 *  val_365;
 val_371 =  val_366 +  val_368;
 val_372 =  val_366 +  val_369;
 val_373 =  val_367 +  val_370;
 val_374 =  A[idx_off + 4] *  A[idx_off + 67];
 val_375 =  A[idx_off + 5] *  A[idx_off + 68];
 val_376 =  A[idx_off + 5] *  val_374;
 val_377 =  A[idx_off + 0] *  val_374;
 val_378 =  A[idx_off + 8] *  val_374;
 val_379 =  A[idx_off + 1] *  val_375;
 val_380 =  A[idx_off + 5] *  val_375;
 val_381 =  A[idx_off + 0] *  val_375;
 val_382 =  A[idx_off + 8] *  val_375;
 val_383 =  A[idx_off + 12] *  val_375;
 val_384 =  val_374 +  val_379;
 val_385 =  val_376 +  val_380;
 val_386 =  val_374 +  val_380;
 val_387 =  val_377 +  val_381;
 val_388 =  val_378 +  val_382;
 val_389 =  val_376 +  val_381;
 val_390 =  val_378 +  val_383;
 val_391 =  A[idx_off + 124] *  val_255;
 val_392 =  A[idx_off + 125] *  val_256;
 val_393 =  A[idx_off + 126] *  val_257;
 val_394 =  A[idx_off + 12] *  val_391;
 val_395 =  A[idx_off + 5] *  val_392;
 val_396 =  A[idx_off + 13] *  val_393;
 val_397 =  A[idx_off + 5] *  val_391;
 val_398 =  A[idx_off + 8] *  val_392;
 val_399 =  A[idx_off + 0] *  val_393;
 val_400 =  A[idx_off + 7] *  val_391;
 val_401 =  A[idx_off + 0] *  val_392;
 val_402 =  A[idx_off + 0] *  val_391;
 val_403 =  A[idx_off + 24] *  val_393;
 val_404 =  A[idx_off + 8] *  val_391;
 val_405 =  A[idx_off + 16] *  val_391;
 val_406 =  A[idx_off + 12] *  val_393;
 val_407 =  val_394 +  val_395;
 val_408 =  val_396 +  val_407;
 val_409 =  val_397 +  val_398;
 val_410 =  val_399 +  val_409;
 val_411 =  val_400 +  val_401;
 val_412 =  val_399 +  val_411;
 val_413 =  val_398 +  val_402;
 val_414 =  val_403 +  val_413;
 val_415 =  val_395 +  val_404;
 val_416 =  val_396 +  val_415;
 val_417 =  val_398 +  val_405;
 val_418 =  val_399 +  val_417;
 val_419 =  val_401 +  val_402;
 val_420 =  val_399 +  val_419;
 val_421 =  val_403 +  val_419;
 val_422 =  val_395 +  val_402;
 val_423 =  val_406 +  val_422;
 val_424 =  A[idx_off + 12] *  A[idx_off + 46];
 val_425 =  A[idx_off + 13] *  A[idx_off + 46];
 val_426 =  A[idx_off + 2] *  A[idx_off + 46];
 val_427 =  A[idx_off + 4] *  A[idx_off + 46];
 val_428 =  A[idx_off + 3] *  A[idx_off + 46];
 val_429 =  A[idx_off + 0] *  A[idx_off + 46];
 val_430 =  A[idx_off + 0] *  A[idx_off + 47];
 val_431 =  A[idx_off + 25] *  A[idx_off + 47];
 val_432 =  A[idx_off + 26] *  A[idx_off + 47];
 val_433 =  A[idx_off + 14] *  A[idx_off + 47];
 val_434 =  A[idx_off + 15] *  A[idx_off + 47];
 val_435 =  A[idx_off + 6] *  A[idx_off + 47];
 val_436 =  A[idx_off + 0] *  A[idx_off + 48];
 val_437 =  A[idx_off + 2] *  A[idx_off + 48];
 val_438 =  A[idx_off + 4] *  A[idx_off + 48];
 val_439 =  A[idx_off + 27] *  A[idx_off + 48];
 val_440 =  A[idx_off + 28] *  A[idx_off + 48];
 val_441 =  A[idx_off + 3] *  A[idx_off + 48];
 val_442 =  val_424 +  val_430;
 val_443 =  val_425 +  val_431;
 val_444 =  val_426 +  val_432;
 val_445 =  val_427 +  val_433;
 val_446 =  val_428 +  val_434;
 val_447 =  val_427 +  val_435;
 val_448 =  val_429 +  val_434;
 val_449 =  val_436 +  val_442;
 val_450 =  val_437 +  val_443;
 val_451 =  val_438 +  val_444;
 val_452 =  val_439 +  val_445;
 val_453 =  val_436 +  val_446;
 val_454 =  val_440 +  val_447;
 val_455 =  val_441 +  val_448;
 val_456 =  A[idx_off + 138] *  val_288;
 val_457 =  A[idx_off + 139] *  val_289;
 val_458 =  A[idx_off + 140] *  val_290;
 val_459 =  A[idx_off + 141] *  val_291;
 val_460 =  A[idx_off + 29] *  val_456;
 val_461 =  A[idx_off + 0] *  val_456;
 val_462 =  A[idx_off + 29] *  val_457;
 val_463 =  A[idx_off + 0] *  val_457;
 val_464 =  A[idx_off + 29] *  val_458;
 val_465 =  A[idx_off + 0] *  val_458;
 val_466 =  A[idx_off + 0] *  val_459;
 val_467 =  A[idx_off + 29] *  val_459;
 val_468 =  val_460 +  val_462;
 val_469 =  val_461 +  val_463;
 val_470 =  val_464 +  val_468;
 val_471 =  val_465 +  val_469;
 val_472 =  val_466 +  val_470;
 val_473 =  val_466 +  val_471;
 val_474 =  val_467 +  val_471;
 val_475 =  val_465 +  val_468;
 val_476 =  val_464 +  val_469;
 val_477 =  val_466 +  val_475;
 val_478 =  val_466 +  val_476;
 val_479 =  A[idx_off + 2] *  A[idx_off + 57];
 val_480 =  A[idx_off + 3] *  A[idx_off + 58];
 val_481 =  val_472 *  val_479;
 val_482 =  val_473 *  val_479;
 val_483 =  val_474 *  val_479;
 val_484 =  val_477 *  val_480;
 val_485 =  val_478 *  val_480;
 val_486 =  val_473 *  val_480;
 val_487 =  val_474 *  val_480;
 val_488 =  val_481 +  val_484;
 val_489 =  val_482 +  val_485;
 val_490 =  val_483 +  val_486;
 val_491 =  val_482 +  val_487;
 val_492 =  A[idx_off + 29] *  A[idx_off + 63];
 val_493 =  A[idx_off + 0] *  A[idx_off + 63];
 val_494 =  A[idx_off + 0] *  A[idx_off + 64];
 val_495 =  A[idx_off + 29] *  A[idx_off + 64];
 val_496 =  A[idx_off + 0] *  A[idx_off + 65];
 val_497 =  A[idx_off + 29] *  A[idx_off + 65];
 val_498 =  A[idx_off + 0] *  A[idx_off + 66];
 val_499 =  A[idx_off + 29] *  A[idx_off + 66];
 val_500 =  val_492 +  val_494;
 val_501 =  val_493 +  val_495;
 val_502 =  val_493 +  val_494;
 val_503 =  val_496 +  val_500;
 val_504 =  val_496 +  val_501;
 val_505 =  val_497 +  val_502;
 val_506 =  val_496 +  val_502;
 val_507 =  val_498 +  val_503;
 val_508 =  val_498 +  val_504;
 val_509 =  val_498 +  val_505;
 val_510 =  val_499 +  val_506;
 val_511 =  A[idx_off + 29] *  A[idx_off + 97];
 val_512 =  A[idx_off + 0] *  A[idx_off + 97];
 val_513 =  A[idx_off + 20] *  A[idx_off + 97];
 val_514 =  A[idx_off + 0] *  A[idx_off + 98];
 val_515 =  A[idx_off + 30] *  A[idx_off + 98];
 val_516 =  A[idx_off + 29] *  A[idx_off + 98];
 val_517 =  A[idx_off + 0] *  A[idx_off + 99];
 val_518 =  A[idx_off + 0] *  A[idx_off + 100];
 val_519 =  A[idx_off + 29] *  A[idx_off + 100];
 val_520 =  A[idx_off + 29] *  A[idx_off + 99];
 val_521 =  A[idx_off + 25] *  A[idx_off + 97];
 val_522 =  A[idx_off + 31] *  A[idx_off + 98];
 val_523 =  val_511 +  val_514;
 val_524 =  val_512 +  val_514;
 val_525 =  val_513 +  val_515;
 val_526 =  val_512 +  val_516;
 val_527 =  val_517 +  val_523;
 val_528 =  val_517 +  val_524;
 val_529 =  val_517 +  val_525;
 val_530 =  val_517 +  val_526;
 val_531 =  val_518 +  val_527;
 val_532 =  val_519 +  val_528;
 val_533 =  val_518 +  val_529;
 val_534 =  val_518 +  val_530;
 val_535 =  val_520 +  val_524;
 val_536 =  val_518 +  val_535;
 val_537 =  val_521 +  val_522;
 val_538 =  val_517 +  val_537;
 val_539 =  val_518 +  val_538;
 val_540 =  A[idx_off + 29] *  A[idx_off + 110];
 val_541 =  A[idx_off + 4] *  A[idx_off + 110];
 val_542 =  A[idx_off + 6] *  A[idx_off + 110];
 val_543 =  A[idx_off + 0] *  A[idx_off + 111];
 val_544 =  A[idx_off + 34] *  A[idx_off + 111];
 val_545 =  A[idx_off + 28] *  A[idx_off + 111];
 val_546 =  A[idx_off + 0] *  A[idx_off + 112];
 val_547 =  A[idx_off + 34] *  A[idx_off + 112];
 val_548 =  A[idx_off + 8] *  A[idx_off + 112];
 val_549 =  A[idx_off + 0] *  A[idx_off + 113];
 val_550 =  A[idx_off + 35] *  A[idx_off + 113];
 val_551 =  A[idx_off + 0] *  A[idx_off + 110];
 val_552 =  A[idx_off + 17] *  A[idx_off + 111];
 val_553 =  A[idx_off + 3] *  A[idx_off + 111];
 val_554 =  A[idx_off + 13] *  A[idx_off + 112];
 val_555 =  A[idx_off + 36] *  A[idx_off + 112];
 val_556 =  A[idx_off + 29] *  A[idx_off + 113];
 val_557 =  A[idx_off + 14] *  A[idx_off + 113];
 val_558 =  A[idx_off + 13] *  A[idx_off + 111];
 val_559 =  A[idx_off + 37] *  A[idx_off + 111];
 val_560 =  A[idx_off + 29] *  A[idx_off + 111];
 val_561 =  A[idx_off + 18] *  A[idx_off + 111];
 val_562 =  A[idx_off + 21] *  A[idx_off + 112];
 val_563 =  A[idx_off + 15] *  A[idx_off + 112];
 val_564 =  A[idx_off + 6] *  A[idx_off + 113];
 val_565 =  A[idx_off + 23] *  A[idx_off + 113];
 val_566 =  A[idx_off + 31] *  A[idx_off + 112];
 val_567 =  A[idx_off + 3] *  A[idx_off + 113];
 val_568 =  A[idx_off + 25] *  A[idx_off + 113];
 val_569 =  A[idx_off + 29] *  A[idx_off + 112];
 val_570 =  A[idx_off + 2] *  A[idx_off + 110];
 val_571 =  A[idx_off + 14] *  A[idx_off + 110];
 val_572 =  A[idx_off + 38] *  A[idx_off + 111];
 val_573 =  A[idx_off + 39] *  A[idx_off + 111];
 val_574 =  A[idx_off + 4] *  A[idx_off + 112];
 val_575 =  val_540 +  val_543;
 val_576 =  val_541 +  val_544;
 val_577 =  val_542 +  val_545;
 val_578 =  val_546 +  val_575;
 val_579 =  val_547 +  val_576;
 val_580 =  val_548 +  val_577;
 val_581 =  val_549 +  val_578;
 val_582 =  val_550 +  val_579;
 val_583 =  val_549 +  val_580;
 val_584 =  val_543 +  val_551;
 val_585 =  val_551 +  val_552;
 val_586 =  val_551 +  val_553;
 val_587 =  val_546 +  val_584;
 val_588 =  val_554 +  val_585;
 val_589 =  val_555 +  val_586;
 val_590 =  val_556 +  val_587;
 val_591 =  val_557 +  val_588;
 val_592 =  val_549 +  val_589;
 val_593 =  val_551 +  val_558;
 val_594 =  val_551 +  val_559;
 val_595 =  val_551 +  val_560;
 val_596 =  val_542 +  val_561;
 val_597 =  val_562 +  val_593;
 val_598 =  val_547 +  val_594;
 val_599 =  val_546 +  val_595;
 val_600 =  val_563 +  val_596;
 val_601 =  val_564 +  val_597;
 val_602 =  val_565 +  val_598;
 val_603 =  val_549 +  val_599;
 val_604 =  val_549 +  val_600;
 val_605 =  val_555 +  val_584;
 val_606 =  val_566 +  val_584;
 val_607 =  val_567 +  val_605;
 val_608 =  val_568 +  val_606;
 val_609 =  val_569 +  val_584;
 val_610 =  val_549 +  val_609;
 val_611 =  val_570 +  val_572;
 val_612 =  val_571 +  val_573;
 val_613 =  val_574 +  val_611;
 val_614 =  val_546 +  val_612;
 val_615 =  val_549 +  val_613;
 val_616 =  val_549 +  val_614;
 val_617 =  A[idx_off + 142] *  val_488;
 val_618 =  A[idx_off + 143] *  val_489;
 val_619 =  A[idx_off + 144] *  val_490;
 val_620 =  A[idx_off + 145] *  val_491;
 val_621 =  val_581 *  val_617;
 val_622 =  val_582 *  val_618;
 val_623 =  val_581 *  val_619;
 val_624 =  val_583 *  val_620;
 val_625 =  val_590 *  val_617;
 val_626 =  val_591 *  val_618;
 val_627 =  val_590 *  val_619;
 val_628 =  val_592 *  val_620;
 val_629 =  val_601 *  val_617;
 val_630 =  val_602 *  val_618;
 val_631 =  val_603 *  val_619;
 val_632 =  val_604 *  val_620;
 val_633 =  val_607 *  val_618;
 val_634 =  val_608 *  val_620;
 val_635 =  val_607 *  val_617;
 val_636 =  val_581 *  val_618;
 val_637 =  val_610 *  val_619;
 val_638 =  val_581 *  val_620;
 val_639 =  val_615 *  val_617;
 val_640 =  val_590 *  val_618;
 val_641 =  val_616 *  val_619;
 val_642 =  val_590 *  val_620;
 val_643 =  A[idx_off + 29] *  val_621;
 val_644 =  A[idx_off + 29] *  val_622;
 val_645 =  A[idx_off + 29] *  val_623;
 val_646 =  A[idx_off + 29] *  val_624;
 val_647 =  A[idx_off + 0] *  val_621;
 val_648 =  A[idx_off + 0] *  val_622;
 val_649 =  A[idx_off + 0] *  val_623;
 val_650 =  A[idx_off + 0] *  val_624;
 val_651 =  A[idx_off + 13] *  val_625;
 val_652 =  A[idx_off + 5] *  val_626;
 val_653 =  A[idx_off + 0] *  val_627;
 val_654 =  A[idx_off + 0] *  val_628;
 val_655 =  A[idx_off + 40] *  val_625;
 val_656 =  A[idx_off + 11] *  val_626;
 val_657 =  A[idx_off + 29] *  val_628;
 val_658 =  A[idx_off + 0] *  val_625;
 val_659 =  A[idx_off + 0] *  val_626;
 val_660 =  A[idx_off + 29] *  val_627;
 val_661 =  A[idx_off + 5] *  val_629;
 val_662 =  A[idx_off + 29] *  val_630;
 val_663 =  A[idx_off + 0] *  val_631;
 val_664 =  A[idx_off + 29] *  val_632;
 val_665 =  A[idx_off + 11] *  val_629;
 val_666 =  A[idx_off + 0] *  val_630;
 val_667 =  A[idx_off + 29] *  val_631;
 val_668 =  A[idx_off + 0] *  val_632;
 val_669 =  A[idx_off + 0] *  val_629;
 val_670 =  A[idx_off + 20] *  val_633;
 val_671 =  A[idx_off + 0] *  val_634;
 val_672 =  A[idx_off + 30] *  val_633;
 val_673 =  A[idx_off + 0] *  val_633;
 val_674 =  A[idx_off + 29] *  val_634;
 val_675 =  A[idx_off + 14] *  val_635;
 val_676 =  A[idx_off + 29] *  val_636;
 val_677 =  A[idx_off + 0] *  val_637;
 val_678 =  A[idx_off + 29] *  val_638;
 val_679 =  A[idx_off + 39] *  val_635;
 val_680 =  A[idx_off + 0] *  val_636;
 val_681 =  A[idx_off + 0] *  val_638;
 val_682 =  A[idx_off + 0] *  val_635;
 val_683 =  A[idx_off + 29] *  val_637;
 val_684 =  A[idx_off + 29] *  val_639;
 val_685 =  A[idx_off + 13] *  val_640;
 val_686 =  A[idx_off + 29] *  val_641;
 val_687 =  A[idx_off + 0] *  val_642;
 val_688 =  A[idx_off + 0] *  val_639;
 val_689 =  A[idx_off + 40] *  val_640;
 val_690 =  A[idx_off + 0] *  val_641;
 val_691 =  A[idx_off + 0] *  val_640;
 val_692 =  A[idx_off + 29] *  val_642;
 val_693 =  val_643 +  val_644;
 val_694 =  val_645 +  val_693;
 val_695 =  val_646 +  val_694;
 val_696 =  val_647 +  val_648;
 val_697 =  val_649 +  val_696;
 val_698 =  val_650 +  val_697;
 val_699 =  val_651 +  val_652;
 val_700 =  val_653 +  val_699;
 val_701 =  val_654 +  val_700;
 val_702 =  val_655 +  val_656;
 val_703 =  val_653 +  val_702;
 val_704 =  val_657 +  val_703;
 val_705 =  val_658 +  val_659;
 val_706 =  val_653 +  val_705;
 val_707 =  val_654 +  val_706;
 val_708 =  val_660 +  val_705;
 val_709 =  val_654 +  val_708;
 val_710 =  val_661 +  val_662;
 val_711 =  val_663 +  val_710;
 val_712 =  val_664 +  val_711;
 val_713 =  val_665 +  val_666;
 val_714 =  val_667 +  val_713;
 val_715 =  val_668 +  val_714;
 val_716 =  val_666 +  val_669;
 val_717 =  val_663 +  val_716;
 val_718 =  val_668 +  val_717;
 val_719 =  val_643 +  val_670;
 val_720 =  val_645 +  val_719;
 val_721 =  val_671 +  val_720;
 val_722 =  val_647 +  val_672;
 val_723 =  val_649 +  val_722;
 val_724 =  val_671 +  val_723;
 val_725 =  val_647 +  val_673;
 val_726 =  val_649 +  val_725;
 val_727 =  val_674 +  val_726;
 val_728 =  val_671 +  val_726;
 val_729 =  val_675 +  val_676;
 val_730 =  val_677 +  val_729;
 val_731 =  val_678 +  val_730;
 val_732 =  val_679 +  val_680;
 val_733 =  val_677 +  val_732;
 val_734 =  val_681 +  val_733;
 val_735 =  val_680 +  val_682;
 val_736 =  val_683 +  val_735;
 val_737 =  val_681 +  val_736;
 val_738 =  val_677 +  val_735;
 val_739 =  val_681 +  val_738;
 val_740 =  val_684 +  val_685;
 val_741 =  val_686 +  val_740;
 val_742 =  val_687 +  val_741;
 val_743 =  val_688 +  val_689;
 val_744 =  val_690 +  val_743;
 val_745 =  val_687 +  val_744;
 val_746 =  val_688 +  val_691;
 val_747 =  val_690 +  val_746;
 val_748 =  val_687 +  val_747;
 val_749 =  val_692 +  val_747;
 val_750 =  A[idx_off + 8] *  A[idx_off + 90];
 val_751 =  A[idx_off + 9] *  A[idx_off + 91];
 val_752 =  val_695 *  val_750;
 val_753 =  val_698 *  val_750;
 val_754 =  val_701 *  val_751;
 val_755 =  val_704 *  val_751;
 val_756 =  val_707 *  val_751;
 val_757 =  val_709 *  val_751;
 val_758 =  val_712 *  val_750;
 val_759 =  val_715 *  val_750;
 val_760 =  val_718 *  val_750;
 val_761 =  val_721 *  val_751;
 val_762 =  val_724 *  val_751;
 val_763 =  val_727 *  val_751;
 val_764 =  val_728 *  val_751;
 val_765 =  val_731 *  val_750;
 val_766 =  val_734 *  val_750;
 val_767 =  val_737 *  val_750;
 val_768 =  val_739 *  val_750;
 val_769 =  val_742 *  val_751;
 val_770 =  val_745 *  val_751;
 val_771 =  val_748 *  val_751;
 val_772 =  val_749 *  val_751;
 val_773 =  val_752 +  val_754;
 val_774 =  val_753 +  val_755;
 val_775 =  val_753 +  val_756;
 val_776 =  val_753 +  val_757;
 val_777 =  val_758 +  val_761;
 val_778 =  val_759 +  val_762;
 val_779 =  val_760 +  val_763;
 val_780 =  val_760 +  val_764;
 val_781 =  val_765 +  val_769;
 val_782 =  val_766 +  val_770;
 val_783 =  val_767 +  val_771;
 val_784 =  val_768 +  val_772;
 val_785 =  A[idx_off + 2] *  A[idx_off + 85];
 val_786 =  A[idx_off + 3] *  A[idx_off + 86];
 val_787 =  A[idx_off + 0] *  val_785;
 val_788 =  A[idx_off + 18] *  val_785;
 val_789 =  A[idx_off + 4] *  val_785;
 val_790 =  A[idx_off + 5] *  val_785;
 val_791 =  A[idx_off + 0] *  val_786;
 val_792 =  A[idx_off + 4] *  val_786;
 val_793 =  A[idx_off + 18] *  val_786;
 val_794 =  A[idx_off + 5] *  val_786;
 val_795 =  A[idx_off + 1] *  val_785;
 val_796 =  A[idx_off + 13] *  val_785;
 val_797 =  A[idx_off + 1] *  val_786;
 val_798 =  A[idx_off + 13] *  val_786;
 val_799 =  A[idx_off + 2] *  val_785;
 val_800 =  A[idx_off + 2] *  val_786;
 val_801 =  A[idx_off + 3] *  val_785;
 val_802 =  A[idx_off + 3] *  val_786;
 val_803 =  val_787 +  val_791;
 val_804 =  val_787 +  val_792;
 val_805 =  val_788 +  val_793;
 val_806 =  val_789 +  val_792;
 val_807 =  val_788 +  val_794;
 val_808 =  val_790 +  val_794;
 val_809 =  val_795 +  val_797;
 val_810 =  val_794 +  val_795;
 val_811 =  val_796 +  val_798;
 val_812 =  val_792 +  val_796;
 val_813 =  val_788 +  val_797;
 val_814 =  val_791 +  val_796;
 val_815 =  val_799 +  val_800;
 val_816 =  val_798 +  val_799;
 val_817 =  val_801 +  val_802;
 val_818 =  val_793 +  val_801;
 val_819 =  A[idx_off + 71] *  val_337;
 val_820 =  A[idx_off + 72] *  val_339;
 val_821 =  A[idx_off + 73] *  val_341;
 val_822 =  val_371 *  val_819;
 val_823 =  val_372 *  val_820;
 val_824 =  val_373 *  val_821;
 val_825 =  A[idx_off + 4] *  val_822;
 val_826 =  A[idx_off + 3] *  val_823;
 val_827 =  A[idx_off + 4] *  val_824;
 val_828 =  A[idx_off + 0] *  val_822;
 val_829 =  A[idx_off + 15] *  val_823;
 val_830 =  A[idx_off + 3] *  val_824;
 val_831 =  val_408 *  val_825;
 val_832 =  val_410 *  val_826;
 val_833 =  val_412 *  val_827;
 val_834 =  val_414 *  val_825;
 val_835 =  val_416 *  val_826;
 val_836 =  val_418 *  val_827;
 val_837 =  val_420 *  val_825;
 val_838 =  val_421 *  val_826;
 val_839 =  val_423 *  val_827;
 val_840 =  val_408 *  val_828;
 val_841 =  val_410 *  val_829;
 val_842 =  val_412 *  val_830;
 val_843 =  val_414 *  val_828;
 val_844 =  val_416 *  val_829;
 val_845 =  val_418 *  val_830;
 val_846 =  val_420 *  val_828;
 val_847 =  val_421 *  val_829;
 val_848 =  val_423 *  val_830;
 val_849 =  val_831 +  val_832;
 val_850 =  val_833 +  val_849;
 val_851 =  val_834 +  val_835;
 val_852 =  val_836 +  val_851;
 val_853 =  val_837 +  val_838;
 val_854 =  val_839 +  val_853;
 val_855 =  val_840 +  val_841;
 val_856 =  val_842 +  val_855;
 val_857 =  val_843 +  val_844;
 val_858 =  val_845 +  val_857;
 val_859 =  val_846 +  val_847;
 val_860 =  val_848 +  val_859;
 val_861 =  A[idx_off + 51] *  val_850;
 val_862 =  A[idx_off + 52] *  val_852;
 val_863 =  A[idx_off + 53] *  val_854;
 val_864 =  A[idx_off + 51] *  val_856;
 val_865 =  A[idx_off + 52] *  val_858;
 val_866 =  A[idx_off + 53] *  val_860;
 val_867 =  val_449 *  val_861;
 val_868 =  val_450 *  val_861;
 val_869 =  val_449 *  val_862;
 val_870 =  val_451 *  val_862;
 val_871 =  val_452 *  val_862;
 val_872 =  val_453 *  val_863;
 val_873 =  val_454 *  val_863;
 val_874 =  val_455 *  val_863;
 val_875 =  val_449 *  val_864;
 val_876 =  val_450 *  val_864;
 val_877 =  val_449 *  val_865;
 val_878 =  val_451 *  val_865;
 val_879 =  val_452 *  val_865;
 val_880 =  val_453 *  val_866;
 val_881 =  val_454 *  val_866;
 val_882 =  val_455 *  val_866;
 val_883 =  val_867 +  val_869;
 val_884 =  val_867 +  val_870;
 val_885 =  val_868 +  val_871;
 val_886 =  val_872 +  val_883;
 val_887 =  val_873 +  val_884;
 val_888 =  val_874 +  val_885;
 val_889 =  val_875 +  val_877;
 val_890 =  val_875 +  val_878;
 val_891 =  val_876 +  val_879;
 val_892 =  val_880 +  val_889;
 val_893 =  val_881 +  val_890;
 val_894 =  val_882 +  val_891;
 val_895 =  A[idx_off + 127] *  val_168;
 val_896 =  A[idx_off + 128] *  val_169;
 val_897 =  A[idx_off + 129] *  val_170;
 val_898 =  val_886 *  val_895;
 val_899 =  val_887 *  val_896;
 val_900 =  val_888 *  val_897;
 val_901 =  val_892 *  val_895;
 val_902 =  val_893 *  val_896;
 val_903 =  val_894 *  val_897;
 val_904 =  val_803 *  val_898;
 val_905 =  val_804 *  val_899;
 val_906 =  val_805 *  val_900;
 val_907 =  val_806 *  val_899;
 val_908 =  val_807 *  val_900;
 val_909 =  val_804 *  val_898;
 val_910 =  val_808 *  val_900;
 val_911 =  val_809 *  val_901;
 val_912 =  val_810 *  val_902;
 val_913 =  val_811 *  val_903;
 val_914 =  val_808 *  val_902;
 val_915 =  val_812 *  val_903;
 val_916 =  val_810 *  val_901;
 val_917 =  val_806 *  val_903;
 val_918 =  val_813 *  val_900;
 val_919 =  val_809 *  val_900;
 val_920 =  val_814 *  val_903;
 val_921 =  val_803 *  val_903;
 val_922 =  val_803 *  val_899;
 val_923 =  val_815 *  val_900;
 val_924 =  val_816 *  val_900;
 val_925 =  val_811 *  val_900;
 val_926 =  val_809 *  val_902;
 val_927 =  val_817 *  val_903;
 val_928 =  val_818 *  val_903;
 val_929 =  val_805 *  val_903;
 val_930 =  val_904 +  val_905;
 val_931 =  val_906 +  val_930;
 val_932 =  val_904 +  val_907;
 val_933 =  val_908 +  val_932;
 val_934 =  val_907 +  val_909;
 val_935 =  val_910 +  val_934;
 val_936 =  val_911 +  val_912;
 val_937 =  val_913 +  val_936;
 val_938 =  val_911 +  val_914;
 val_939 =  val_915 +  val_938;
 val_940 =  val_914 +  val_916;
 val_941 =  val_917 +  val_940;
 val_942 =  val_918 +  val_932;
 val_943 =  val_919 +  val_934;
 val_944 =  val_920 +  val_938;
 val_945 =  val_921 +  val_940;
 val_946 =  val_904 +  val_922;
 val_947 =  val_923 +  val_946;
 val_948 =  val_924 +  val_946;
 val_949 =  val_925 +  val_946;
 val_950 =  val_911 +  val_926;
 val_951 =  val_927 +  val_950;
 val_952 =  val_928 +  val_950;
 val_953 =  val_929 +  val_950;
 val_954 =  A[idx_off + 49] *  val_931;
 val_955 =  A[idx_off + 49] *  val_933;
 val_956 =  A[idx_off + 49] *  val_935;
 val_957 =  A[idx_off + 50] *  val_937;
 val_958 =  A[idx_off + 50] *  val_939;
 val_959 =  A[idx_off + 50] *  val_941;
 val_960 =  A[idx_off + 49] *  val_942;
 val_961 =  A[idx_off + 49] *  val_943;
 val_962 =  A[idx_off + 50] *  val_944;
 val_963 =  A[idx_off + 50] *  val_945;
 val_964 =  A[idx_off + 49] *  val_947;
 val_965 =  A[idx_off + 49] *  val_948;
 val_966 =  A[idx_off + 49] *  val_949;
 val_967 =  A[idx_off + 50] *  val_951;
 val_968 =  A[idx_off + 50] *  val_952;
 val_969 =  A[idx_off + 50] *  val_953;
 val_970 =  val_954 +  val_957;
 val_971 =  val_955 +  val_958;
 val_972 =  val_956 +  val_959;
 val_973 =  val_960 +  val_962;
 val_974 =  val_961 +  val_963;
 val_975 =  val_964 +  val_967;
 val_976 =  val_965 +  val_968;
 val_977 =  val_966 +  val_969;
 val_978 =  A[idx_off + 134] *  val_507;
 val_979 =  A[idx_off + 135] *  val_508;
 val_980 =  A[idx_off + 136] *  val_509;
 val_981 =  A[idx_off + 137] *  val_510;
 val_982 =  A[idx_off + 134] *  val_508;
 val_983 =  A[idx_off + 135] *  val_507;
 val_984 =  A[idx_off + 135] *  val_509;
 val_985 =  A[idx_off + 136] *  val_507;
 val_986 =  val_531 *  val_978;
 val_987 =  val_532 *  val_979;
 val_988 =  val_533 *  val_980;
 val_989 =  val_534 *  val_981;
 val_990 =  val_534 *  val_978;
 val_991 =  val_531 *  val_979;
 val_992 =  val_536 *  val_981;
 val_993 =  val_536 *  val_978;
 val_994 =  val_539 *  val_979;
 val_995 =  val_531 *  val_980;
 val_996 =  val_532 *  val_981;
 val_997 =  val_531 *  val_982;
 val_998 =  val_532 *  val_983;
 val_999 =  val_534 *  val_982;
 val_1000 =  val_531 *  val_983;
 val_1001 =  val_536 *  val_982;
 val_1002 =  val_539 *  val_983;
 val_1003 =  val_532 *  val_984;
 val_1004 =  val_533 *  val_985;
 val_1005 =  val_531 *  val_984;
 val_1006 =  val_539 *  val_984;
 val_1007 =  val_531 *  val_985;
 val_1008 =  val_773 *  val_986;
 val_1009 =  val_774 *  val_987;
 val_1010 =  val_775 *  val_988;
 val_1011 =  val_776 *  val_989;
 val_1012 =  val_777 *  val_990;
 val_1013 =  val_778 *  val_991;
 val_1014 =  val_779 *  val_988;
 val_1015 =  val_780 *  val_992;
 val_1016 =  val_781 *  val_993;
 val_1017 =  val_782 *  val_994;
 val_1018 =  val_783 *  val_995;
 val_1019 =  val_784 *  val_996;
 val_1020 =  val_773 *  val_997;
 val_1021 =  val_774 *  val_998;
 val_1022 =  val_777 *  val_999;
 val_1023 =  val_778 *  val_1000;
 val_1024 =  val_781 *  val_1001;
 val_1025 =  val_782 *  val_1002;
 val_1026 =  val_774 *  val_1003;
 val_1027 =  val_775 *  val_1004;
 val_1028 =  val_778 *  val_1005;
 val_1029 =  val_779 *  val_1004;
 val_1030 =  val_782 *  val_1006;
 val_1031 =  val_783 *  val_1007;
 val_1032 =  A[idx_off + 29] *  val_1008;
 val_1033 =  A[idx_off + 0] *  val_1009;
 val_1034 =  A[idx_off + 0] *  val_1010;
 val_1035 =  A[idx_off + 11] *  val_1011;
 val_1036 =  A[idx_off + 0] *  val_1008;
 val_1037 =  A[idx_off + 5] *  val_1011;
 val_1038 =  A[idx_off + 29] *  val_1010;
 val_1039 =  A[idx_off + 0] *  val_1011;
 val_1040 =  A[idx_off + 29] *  val_1009;
 val_1041 =  A[idx_off + 0] *  val_1012;
 val_1042 =  A[idx_off + 29] *  val_1013;
 val_1043 =  A[idx_off + 0] *  val_1014;
 val_1044 =  A[idx_off + 0] *  val_1015;
 val_1045 =  A[idx_off + 29] *  val_1012;
 val_1046 =  A[idx_off + 0] *  val_1013;
 val_1047 =  A[idx_off + 32] *  val_1015;
 val_1048 =  A[idx_off + 8] *  val_1015;
 val_1049 =  A[idx_off + 29] *  val_1014;
 val_1050 =  A[idx_off + 0] *  val_1016;
 val_1051 =  A[idx_off + 0] *  val_1017;
 val_1052 =  A[idx_off + 29] *  val_1018;
 val_1053 =  A[idx_off + 0] *  val_1019;
 val_1054 =  A[idx_off + 29] *  val_1017;
 val_1055 =  A[idx_off + 0] *  val_1018;
 val_1056 =  A[idx_off + 33] *  val_1019;
 val_1057 =  A[idx_off + 29] *  val_1016;
 val_1058 =  A[idx_off + 2] *  val_1019;
 val_1059 =  A[idx_off + 29] *  val_1020;
 val_1060 =  A[idx_off + 0] *  val_1021;
 val_1061 =  A[idx_off + 0] *  val_1020;
 val_1062 =  A[idx_off + 29] *  val_1021;
 val_1063 =  A[idx_off + 0] *  val_1022;
 val_1064 =  A[idx_off + 29] *  val_1023;
 val_1065 =  A[idx_off + 29] *  val_1022;
 val_1066 =  A[idx_off + 0] *  val_1023;
 val_1067 =  A[idx_off + 0] *  val_1024;
 val_1068 =  A[idx_off + 0] *  val_1025;
 val_1069 =  A[idx_off + 29] *  val_1025;
 val_1070 =  A[idx_off + 29] *  val_1024;
 val_1071 =  A[idx_off + 0] *  val_1026;
 val_1072 =  A[idx_off + 0] *  val_1027;
 val_1073 =  A[idx_off + 29] *  val_1027;
 val_1074 =  A[idx_off + 29] *  val_1026;
 val_1075 =  A[idx_off + 29] *  val_1028;
 val_1076 =  A[idx_off + 0] *  val_1029;
 val_1077 =  A[idx_off + 0] *  val_1028;
 val_1078 =  A[idx_off + 29] *  val_1029;
 val_1079 =  A[idx_off + 0] *  val_1030;
 val_1080 =  A[idx_off + 29] *  val_1031;
 val_1081 =  A[idx_off + 29] *  val_1030;
 val_1082 =  A[idx_off + 0] *  val_1031;
 val_1083 =  val_1032 +  val_1033;
 val_1084 =  val_1034 +  val_1083;
 val_1085 =  val_1035 +  val_1084;
 val_1086 =  val_1033 +  val_1036;
 val_1087 =  val_1034 +  val_1086;
 val_1088 =  val_1037 +  val_1087;
 val_1089 =  val_1038 +  val_1086;
 val_1090 =  val_1039 +  val_1089;
 val_1091 =  val_1036 +  val_1040;
 val_1092 =  val_1034 +  val_1091;
 val_1093 =  val_1039 +  val_1092;
 val_1094 =  val_1041 +  val_1042;
 val_1095 =  val_1043 +  val_1094;
 val_1096 =  val_1044 +  val_1095;
 val_1097 =  val_1045 +  val_1046;
 val_1098 =  val_1043 +  val_1097;
 val_1099 =  val_1047 +  val_1098;
 val_1100 =  val_1041 +  val_1046;
 val_1101 =  val_1043 +  val_1100;
 val_1102 =  val_1048 +  val_1101;
 val_1103 =  val_1049 +  val_1100;
 val_1104 =  val_1044 +  val_1103;
 val_1105 =  val_1050 +  val_1051;
 val_1106 =  val_1052 +  val_1105;
 val_1107 =  val_1053 +  val_1106;
 val_1108 =  val_1050 +  val_1054;
 val_1109 =  val_1055 +  val_1108;
 val_1110 =  val_1056 +  val_1109;
 val_1111 =  val_1051 +  val_1057;
 val_1112 =  val_1055 +  val_1111;
 val_1113 =  val_1058 +  val_1112;
 val_1114 =  val_1055 +  val_1105;
 val_1115 =  val_1053 +  val_1114;
 val_1116 =  val_1059 +  val_1060;
 val_1117 =  val_1034 +  val_1116;
 val_1118 =  val_1035 +  val_1117;
 val_1119 =  val_1060 +  val_1061;
 val_1120 =  val_1034 +  val_1119;
 val_1121 =  val_1037 +  val_1120;
 val_1122 =  val_1038 +  val_1119;
 val_1123 =  val_1039 +  val_1122;
 val_1124 =  val_1061 +  val_1062;
 val_1125 =  val_1034 +  val_1124;
 val_1126 =  val_1039 +  val_1125;
 val_1127 =  val_1063 +  val_1064;
 val_1128 =  val_1043 +  val_1127;
 val_1129 =  val_1044 +  val_1128;
 val_1130 =  val_1065 +  val_1066;
 val_1131 =  val_1043 +  val_1130;
 val_1132 =  val_1047 +  val_1131;
 val_1133 =  val_1063 +  val_1066;
 val_1134 =  val_1043 +  val_1133;
 val_1135 =  val_1048 +  val_1134;
 val_1136 =  val_1049 +  val_1133;
 val_1137 =  val_1044 +  val_1136;
 val_1138 =  val_1067 +  val_1068;
 val_1139 =  val_1052 +  val_1138;
 val_1140 =  val_1053 +  val_1139;
 val_1141 =  val_1067 +  val_1069;
 val_1142 =  val_1055 +  val_1141;
 val_1143 =  val_1056 +  val_1142;
 val_1144 =  val_1068 +  val_1070;
 val_1145 =  val_1055 +  val_1144;
 val_1146 =  val_1058 +  val_1145;
 val_1147 =  val_1055 +  val_1138;
 val_1148 =  val_1053 +  val_1147;
 val_1149 =  val_1059 +  val_1071;
 val_1150 =  val_1072 +  val_1149;
 val_1151 =  val_1035 +  val_1150;
 val_1152 =  val_1061 +  val_1071;
 val_1153 =  val_1072 +  val_1152;
 val_1154 =  val_1037 +  val_1153;
 val_1155 =  val_1073 +  val_1152;
 val_1156 =  val_1039 +  val_1155;
 val_1157 =  val_1061 +  val_1074;
 val_1158 =  val_1072 +  val_1157;
 val_1159 =  val_1039 +  val_1158;
 val_1160 =  val_1063 +  val_1075;
 val_1161 =  val_1076 +  val_1160;
 val_1162 =  val_1044 +  val_1161;
 val_1163 =  val_1065 +  val_1077;
 val_1164 =  val_1076 +  val_1163;
 val_1165 =  val_1047 +  val_1164;
 val_1166 =  val_1063 +  val_1077;
 val_1167 =  val_1076 +  val_1166;
 val_1168 =  val_1048 +  val_1167;
 val_1169 =  val_1078 +  val_1166;
 val_1170 =  val_1044 +  val_1169;
 val_1171 =  val_1067 +  val_1079;
 val_1172 =  val_1080 +  val_1171;
 val_1173 =  val_1053 +  val_1172;
 val_1174 =  val_1067 +  val_1081;
 val_1175 =  val_1082 +  val_1174;
 val_1176 =  val_1056 +  val_1175;
 val_1177 =  val_1070 +  val_1079;
 val_1178 =  val_1082 +  val_1177;
 val_1179 =  val_1058 +  val_1178;
 val_1180 =  val_1082 +  val_1171;
 val_1181 =  val_1053 +  val_1180;
 val_1182 =  A[idx_off + 10] *  A[idx_off + 87];
 val_1183 =  A[idx_off + 11] *  A[idx_off + 88];
 val_1184 =  A[idx_off + 4] *  A[idx_off + 89];
 val_1185 =  val_268 *  val_1182;
 val_1186 =  val_269 *  val_1182;
 val_1187 =  val_268 *  val_1183;
 val_1188 =  val_269 *  val_1183;
 val_1189 =  val_270 *  val_1184;
 val_1190 =  val_271 *  val_1184;
 val_1191 =  val_1085 *  val_1185;
 val_1192 =  val_1088 *  val_1185;
 val_1193 =  val_1090 *  val_1185;
 val_1194 =  val_1093 *  val_1185;
 val_1195 =  val_1085 *  val_1186;
 val_1196 =  val_1088 *  val_1186;
 val_1197 =  val_1090 *  val_1186;
 val_1198 =  val_1093 *  val_1186;
 val_1199 =  val_1096 *  val_1187;
 val_1200 =  val_1099 *  val_1187;
 val_1201 =  val_1102 *  val_1187;
 val_1202 =  val_1104 *  val_1187;
 val_1203 =  val_1096 *  val_1188;
 val_1204 =  val_1099 *  val_1188;
 val_1205 =  val_1102 *  val_1188;
 val_1206 =  val_1104 *  val_1188;
 val_1207 =  val_1107 *  val_1189;
 val_1208 =  val_1110 *  val_1189;
 val_1209 =  val_1113 *  val_1189;
 val_1210 =  val_1115 *  val_1189;
 val_1211 =  val_1107 *  val_1190;
 val_1212 =  val_1110 *  val_1190;
 val_1213 =  val_1113 *  val_1190;
 val_1214 =  val_1115 *  val_1190;
 val_1215 =  val_1118 *  val_1185;
 val_1216 =  val_1121 *  val_1185;
 val_1217 =  val_1123 *  val_1185;
 val_1218 =  val_1126 *  val_1185;
 val_1219 =  val_1118 *  val_1186;
 val_1220 =  val_1121 *  val_1186;
 val_1221 =  val_1123 *  val_1186;
 val_1222 =  val_1126 *  val_1186;
 val_1223 =  val_1129 *  val_1187;
 val_1224 =  val_1132 *  val_1187;
 val_1225 =  val_1135 *  val_1187;
 val_1226 =  val_1137 *  val_1187;
 val_1227 =  val_1129 *  val_1188;
 val_1228 =  val_1132 *  val_1188;
 val_1229 =  val_1135 *  val_1188;
 val_1230 =  val_1137 *  val_1188;
 val_1231 =  val_1140 *  val_1189;
 val_1232 =  val_1143 *  val_1189;
 val_1233 =  val_1146 *  val_1189;
 val_1234 =  val_1148 *  val_1189;
 val_1235 =  val_1140 *  val_1190;
 val_1236 =  val_1143 *  val_1190;
 val_1237 =  val_1146 *  val_1190;
 val_1238 =  val_1148 *  val_1190;
 val_1239 =  val_1151 *  val_1185;
 val_1240 =  val_1154 *  val_1185;
 val_1241 =  val_1156 *  val_1185;
 val_1242 =  val_1159 *  val_1185;
 val_1243 =  val_1151 *  val_1186;
 val_1244 =  val_1154 *  val_1186;
 val_1245 =  val_1156 *  val_1186;
 val_1246 =  val_1159 *  val_1186;
 val_1247 =  val_1162 *  val_1187;
 val_1248 =  val_1165 *  val_1187;
 val_1249 =  val_1168 *  val_1187;
 val_1250 =  val_1170 *  val_1187;
 val_1251 =  val_1162 *  val_1188;
 val_1252 =  val_1165 *  val_1188;
 val_1253 =  val_1168 *  val_1188;
 val_1254 =  val_1170 *  val_1188;
 val_1255 =  val_1173 *  val_1189;
 val_1256 =  val_1176 *  val_1189;
 val_1257 =  val_1179 *  val_1189;
 val_1258 =  val_1181 *  val_1189;
 val_1259 =  val_1173 *  val_1190;
 val_1260 =  val_1176 *  val_1190;
 val_1261 =  val_1179 *  val_1190;
 val_1262 =  val_1181 *  val_1190;
 val_1263 =  val_1191 +  val_1199;
 val_1264 =  val_1192 +  val_1200;
 val_1265 =  val_1193 +  val_1201;
 val_1266 =  val_1194 +  val_1202;
 val_1267 =  val_1195 +  val_1203;
 val_1268 =  val_1196 +  val_1204;
 val_1269 =  val_1197 +  val_1205;
 val_1270 =  val_1198 +  val_1206;
 val_1271 =  val_1207 +  val_1263;
 val_1272 =  val_1208 +  val_1264;
 val_1273 =  val_1209 +  val_1265;
 val_1274 =  val_1210 +  val_1266;
 val_1275 =  val_1211 +  val_1267;
 val_1276 =  val_1212 +  val_1268;
 val_1277 =  val_1213 +  val_1269;
 val_1278 =  val_1214 +  val_1270;
 val_1279 =  val_1215 +  val_1223;
 val_1280 =  val_1216 +  val_1224;
 val_1281 =  val_1217 +  val_1225;
 val_1282 =  val_1218 +  val_1226;
 val_1283 =  val_1219 +  val_1227;
 val_1284 =  val_1220 +  val_1228;
 val_1285 =  val_1221 +  val_1229;
 val_1286 =  val_1222 +  val_1230;
 val_1287 =  val_1231 +  val_1279;
 val_1288 =  val_1232 +  val_1280;
 val_1289 =  val_1233 +  val_1281;
 val_1290 =  val_1234 +  val_1282;
 val_1291 =  val_1235 +  val_1283;
 val_1292 =  val_1236 +  val_1284;
 val_1293 =  val_1237 +  val_1285;
 val_1294 =  val_1238 +  val_1286;
 val_1295 =  val_1239 +  val_1247;
 val_1296 =  val_1240 +  val_1248;
 val_1297 =  val_1241 +  val_1249;
 val_1298 =  val_1242 +  val_1250;
 val_1299 =  val_1243 +  val_1251;
 val_1300 =  val_1244 +  val_1252;
 val_1301 =  val_1245 +  val_1253;
 val_1302 =  val_1246 +  val_1254;
 val_1303 =  val_1255 +  val_1295;
 val_1304 =  val_1256 +  val_1296;
 val_1305 =  val_1257 +  val_1297;
 val_1306 =  val_1258 +  val_1298;
 val_1307 =  val_1259 +  val_1299;
 val_1308 =  val_1260 +  val_1300;
 val_1309 =  val_1261 +  val_1301;
 val_1310 =  val_1262 +  val_1302;
 val_1311 =  A[idx_off + 119] *  val_970;
 val_1312 =  A[idx_off + 120] *  val_971;
 val_1313 =  A[idx_off + 121] *  val_972;
 val_1314 =  A[idx_off + 120] *  val_973;
 val_1315 =  A[idx_off + 121] *  val_974;
 val_1316 =  A[idx_off + 119] *  val_975;
 val_1317 =  A[idx_off + 120] *  val_976;
 val_1318 =  A[idx_off + 121] *  val_977;
 val_1319 =  A[idx_off + 12] *  val_1311;
 val_1320 =  A[idx_off + 0] *  val_1312;
 val_1321 =  A[idx_off + 0] *  val_1313;
 val_1322 =  A[idx_off + 0] *  val_1311;
 val_1323 =  A[idx_off + 12] *  val_1312;
 val_1324 =  A[idx_off + 24] *  val_1311;
 val_1325 =  A[idx_off + 13] *  val_1312;
 val_1326 =  A[idx_off + 12] *  val_1313;
 val_1327 =  A[idx_off + 0] *  val_1314;
 val_1328 =  A[idx_off + 0] *  val_1315;
 val_1329 =  A[idx_off + 12] *  val_1314;
 val_1330 =  A[idx_off + 13] *  val_1314;
 val_1331 =  A[idx_off + 12] *  val_1315;
 val_1332 =  A[idx_off + 12] *  val_1316;
 val_1333 =  A[idx_off + 0] *  val_1317;
 val_1334 =  A[idx_off + 0] *  val_1318;
 val_1335 =  A[idx_off + 0] *  val_1316;
 val_1336 =  A[idx_off + 12] *  val_1317;
 val_1337 =  A[idx_off + 24] *  val_1316;
 val_1338 =  A[idx_off + 13] *  val_1317;
 val_1339 =  A[idx_off + 12] *  val_1318;
 val_1340 =  val_1319 +  val_1320;
 val_1341 =  val_1321 +  val_1340;
 val_1342 =  val_1322 +  val_1323;
 val_1343 =  val_1321 +  val_1342;
 val_1344 =  val_1320 +  val_1322;
 val_1345 =  val_1324 +  val_1325;
 val_1346 =  val_1326 +  val_1344;
 val_1347 =  val_1321 +  val_1345;
 val_1348 =  val_1319 +  val_1327;
 val_1349 =  val_1328 +  val_1348;
 val_1350 =  val_1322 +  val_1329;
 val_1351 =  val_1328 +  val_1350;
 val_1352 =  val_1322 +  val_1327;
 val_1353 =  val_1324 +  val_1330;
 val_1354 =  val_1331 +  val_1352;
 val_1355 =  val_1328 +  val_1353;
 val_1356 =  val_1332 +  val_1333;
 val_1357 =  val_1334 +  val_1356;
 val_1358 =  val_1335 +  val_1336;
 val_1359 =  val_1334 +  val_1358;
 val_1360 =  val_1333 +  val_1335;
 val_1361 =  val_1337 +  val_1338;
 val_1362 =  val_1339 +  val_1360;
 val_1363 =  val_1334 +  val_1361;
 val_1364 =  A[idx_off + 130] *  val_384;
 val_1365 =  A[idx_off + 131] *  val_385;
 val_1366 =  A[idx_off + 132] *  val_386;
 val_1367 =  A[idx_off + 133] *  val_387;
 val_1368 =  A[idx_off + 130] *  val_381;
 val_1369 =  A[idx_off + 131] *  val_388;
 val_1370 =  A[idx_off + 132] *  val_382;
 val_1371 =  A[idx_off + 133] *  val_389;
 val_1372 =  A[idx_off + 131] *  val_387;
 val_1373 =  A[idx_off + 132] *  val_381;
 val_1374 =  A[idx_off + 133] *  val_390;
 val_1375 =  A[idx_off + 0] *  val_1364;
 val_1376 =  A[idx_off + 0] *  val_1365;
 val_1377 =  A[idx_off + 8] *  val_1366;
 val_1378 =  A[idx_off + 3] *  val_1367;
 val_1379 =  A[idx_off + 0] *  val_1368;
 val_1380 =  A[idx_off + 0] *  val_1369;
 val_1381 =  A[idx_off + 8] *  val_1370;
 val_1382 =  A[idx_off + 3] *  val_1371;
 val_1383 =  A[idx_off + 0] *  val_1372;
 val_1384 =  A[idx_off + 8] *  val_1373;
 val_1385 =  A[idx_off + 3] *  val_1374;
 val_1386 =  A[idx_off + 10] *  val_1366;
 val_1387 =  A[idx_off + 15] *  val_1367;
 val_1388 =  A[idx_off + 10] *  val_1370;
 val_1389 =  A[idx_off + 15] *  val_1371;
 val_1390 =  A[idx_off + 10] *  val_1373;
 val_1391 =  A[idx_off + 15] *  val_1374;
 val_1392 =  A[idx_off + 12] *  val_1364;
 val_1393 =  A[idx_off + 12] *  val_1365;
 val_1394 =  A[idx_off + 0] *  val_1367;
 val_1395 =  A[idx_off + 12] *  val_1368;
 val_1396 =  A[idx_off + 12] *  val_1369;
 val_1397 =  A[idx_off + 0] *  val_1371;
 val_1398 =  A[idx_off + 12] *  val_1372;
 val_1399 =  A[idx_off + 0] *  val_1374;
 val_1400 =  val_1271 *  val_1375;
 val_1401 =  val_1272 *  val_1376;
 val_1402 =  val_1273 *  val_1377;
 val_1403 =  val_1274 *  val_1378;
 val_1404 =  val_1275 *  val_1375;
 val_1405 =  val_1276 *  val_1376;
 val_1406 =  val_1277 *  val_1377;
 val_1407 =  val_1278 *  val_1378;
 val_1408 =  val_1271 *  val_1379;
 val_1409 =  val_1272 *  val_1380;
 val_1410 =  val_1273 *  val_1381;
 val_1411 =  val_1274 *  val_1382;
 val_1412 =  val_1275 *  val_1379;
 val_1413 =  val_1276 *  val_1380;
 val_1414 =  val_1277 *  val_1381;
 val_1415 =  val_1278 *  val_1382;
 val_1416 =  val_1272 *  val_1383;
 val_1417 =  val_1273 *  val_1384;
 val_1418 =  val_1274 *  val_1385;
 val_1419 =  val_1276 *  val_1383;
 val_1420 =  val_1277 *  val_1384;
 val_1421 =  val_1278 *  val_1385;
 val_1422 =  val_1287 *  val_1375;
 val_1423 =  val_1288 *  val_1376;
 val_1424 =  val_1289 *  val_1386;
 val_1425 =  val_1290 *  val_1387;
 val_1426 =  val_1291 *  val_1375;
 val_1427 =  val_1292 *  val_1376;
 val_1428 =  val_1293 *  val_1386;
 val_1429 =  val_1294 *  val_1387;
 val_1430 =  val_1287 *  val_1379;
 val_1431 =  val_1288 *  val_1380;
 val_1432 =  val_1289 *  val_1388;
 val_1433 =  val_1290 *  val_1389;
 val_1434 =  val_1291 *  val_1379;
 val_1435 =  val_1292 *  val_1380;
 val_1436 =  val_1293 *  val_1388;
 val_1437 =  val_1294 *  val_1389;
 val_1438 =  val_1288 *  val_1383;
 val_1439 =  val_1289 *  val_1390;
 val_1440 =  val_1290 *  val_1391;
 val_1441 =  val_1292 *  val_1383;
 val_1442 =  val_1293 *  val_1390;
 val_1443 =  val_1294 *  val_1391;
 val_1444 =  val_1303 *  val_1392;
 val_1445 =  val_1304 *  val_1393;
 val_1446 =  val_1305 *  val_1377;
 val_1447 =  val_1306 *  val_1394;
 val_1448 =  val_1307 *  val_1392;
 val_1449 =  val_1308 *  val_1393;
 val_1450 =  val_1309 *  val_1377;
 val_1451 =  val_1310 *  val_1394;
 val_1452 =  val_1303 *  val_1395;
 val_1453 =  val_1304 *  val_1396;
 val_1454 =  val_1305 *  val_1381;
 val_1455 =  val_1306 *  val_1397;
 val_1456 =  val_1307 *  val_1395;
 val_1457 =  val_1308 *  val_1396;
 val_1458 =  val_1309 *  val_1381;
 val_1459 =  val_1310 *  val_1397;
 val_1460 =  val_1304 *  val_1398;
 val_1461 =  val_1305 *  val_1384;
 val_1462 =  val_1306 *  val_1399;
 val_1463 =  val_1308 *  val_1398;
 val_1464 =  val_1309 *  val_1384;
 val_1465 =  val_1310 *  val_1399;
 val_1466 =  val_1400 +  val_1401;
 val_1467 =  val_1402 +  val_1466;
 val_1468 =  val_1403 +  val_1467;
 val_1469 =  val_1404 +  val_1405;
 val_1470 =  val_1406 +  val_1469;
 val_1471 =  val_1407 +  val_1470;
 val_1472 =  val_1408 +  val_1409;
 val_1473 =  val_1410 +  val_1472;
 val_1474 =  val_1411 +  val_1473;
 val_1475 =  val_1412 +  val_1413;
 val_1476 =  val_1414 +  val_1475;
 val_1477 =  val_1415 +  val_1476;
 val_1478 =  val_1416 +  val_1417;
 val_1479 =  val_1418 +  val_1478;
 val_1480 =  val_1419 +  val_1420;
 val_1481 =  val_1421 +  val_1480;
 val_1482 =  val_1422 +  val_1423;
 val_1483 =  val_1424 +  val_1482;
 val_1484 =  val_1425 +  val_1483;
 val_1485 =  val_1426 +  val_1427;
 val_1486 =  val_1428 +  val_1485;
 val_1487 =  val_1429 +  val_1486;
 val_1488 =  val_1430 +  val_1431;
 val_1489 =  val_1432 +  val_1488;
 val_1490 =  val_1433 +  val_1489;
 val_1491 =  val_1434 +  val_1435;
 val_1492 =  val_1436 +  val_1491;
 val_1493 =  val_1437 +  val_1492;
 val_1494 =  val_1438 +  val_1439;
 val_1495 =  val_1440 +  val_1494;
 val_1496 =  val_1441 +  val_1442;
 val_1497 =  val_1443 +  val_1496;
 val_1498 =  val_1444 +  val_1445;
 val_1499 =  val_1446 +  val_1498;
 val_1500 =  val_1447 +  val_1499;
 val_1501 =  val_1448 +  val_1449;
 val_1502 =  val_1450 +  val_1501;
 val_1503 =  val_1451 +  val_1502;
 val_1504 =  val_1452 +  val_1453;
 val_1505 =  val_1454 +  val_1504;
 val_1506 =  val_1455 +  val_1505;
 val_1507 =  val_1456 +  val_1457;
 val_1508 =  val_1458 +  val_1507;
 val_1509 =  val_1459 +  val_1508;
 val_1510 =  val_1460 +  val_1461;
 val_1511 =  val_1462 +  val_1510;
 val_1512 =  val_1463 +  val_1464;
 val_1513 =  val_1465 +  val_1512;
 val_1514 =  A[idx_off + 43] *  val_1341;
 val_1515 =  A[idx_off + 43] *  val_1343;
 val_1516 =  A[idx_off + 43] *  val_1346;
 val_1517 =  A[idx_off + 43] *  val_1347;
 val_1518 =  A[idx_off + 44] *  val_1349;
 val_1519 =  A[idx_off + 44] *  val_1351;
 val_1520 =  A[idx_off + 44] *  val_1354;
 val_1521 =  A[idx_off + 44] *  val_1355;
 val_1522 =  A[idx_off + 45] *  val_1357;
 val_1523 =  A[idx_off + 45] *  val_1359;
 val_1524 =  A[idx_off + 45] *  val_1362;
 val_1525 =  A[idx_off + 45] *  val_1363;
 val_1526 =  val_1468 *  val_1514;
 val_1527 =  val_1471 *  val_1514;
 val_1528 =  val_1474 *  val_1515;
 val_1529 =  val_1477 *  val_1514;
 val_1530 =  val_1479 *  val_1516;
 val_1531 =  val_1481 *  val_1517;
 val_1532 =  val_1484 *  val_1518;
 val_1533 =  val_1487 *  val_1518;
 val_1534 =  val_1490 *  val_1519;
 val_1535 =  val_1493 *  val_1518;
 val_1536 =  val_1495 *  val_1520;
 val_1537 =  val_1497 *  val_1521;
 val_1538 =  val_1500 *  val_1522;
 val_1539 =  val_1503 *  val_1522;
 val_1540 =  val_1506 *  val_1523;
 val_1541 =  val_1509 *  val_1522;
 val_1542 =  val_1511 *  val_1524;
 val_1543 =  val_1513 *  val_1525;
 val_1544 =  val_1526 +  val_1532;
 val_1545 =  val_1527 +  val_1533;
 val_1546 =  val_1528 +  val_1534;
 val_1547 =  val_1529 +  val_1535;
 val_1548 =  val_1530 +  val_1536;
 val_1549 =  val_1531 +  val_1537;
 val_1550 =  val_1538 +  val_1544;
 val_1551 =  val_1539 +  val_1545;
 val_1552 =  val_1540 +  val_1546;
 val_1553 =  val_1541 +  val_1547;
 val_1554 =  val_1542 +  val_1548;
 val_1555 =  val_1543 +  val_1549;
 val_1556 =  A[idx_off + 122] *  val_1550;
 val_1557 =  A[idx_off + 123] *  val_1551;
 val_1558 =  A[idx_off + 122] *  val_1552;
 val_1559 =  A[idx_off + 123] *  val_1553;
 val_1560 =  A[idx_off + 122] *  val_1554;
 val_1561 =  A[idx_off + 123] *  val_1555;
 val_1562 =  val_1556 +  val_1557;
 val_1563 =  val_1558 +  val_1559;
 val_1564 =  val_1560 +  val_1561;
 val_1565 =  A[idx_off + 116] *  val_1562;
 val_1566 =  A[idx_off + 117] *  val_1563;
 val_1567 =  A[idx_off + 118] *  val_1564;
 val_1568 =  val_1565 +  val_1566;
 val_1569 =  val_1567 +  val_1568;
 A[i*n_inputs] += val_1569;
  }
  A[i*n_inputs] += val_1569;
}

int 
main(void)
{
    // Error code to check return values for CUDA calls
    cudaError_t err = cudaSuccess;
    
#define N_INPUTS 192
#define N_ARITH 1420
    const int n_inputs= N_INPUTS;
    const int n_arith= N_ARITH;
    const int batch_size= 1024;
    const int iter= 1024;
    const int thresh= n_arith/3;

    size_t size= batch_size * (n_inputs) * (iter) * sizeof(float);
    size_t size_idx= n_arith * sizeof(int);

    float *h_A= (float *)malloc(size);
    int *h_B= (int *)malloc(size_idx);
    int *h_C= (int *)malloc(size_idx);
    int *h_op_sel= (int *) malloc(size_idx);
    
    // Initialize the host input vectors
    for (int i = 0; i < n_arith; ++i)
    {
        if (i < thresh) {
          h_B[i] = rand() % (n_inputs); 
          h_C[i] = rand() % (n_inputs);  
        }
        else{
          h_B[i] = rand() % (i); 
          h_C[i] = rand() % (i);  
        }
        h_op_sel[i]= rand() % 2;
    }
    
    for (int i= 0; i < n_inputs; ++i) {
      for (int b =0; b< batch_size; ++b) {
        //h_A[b* n_inputs + i]= float(rand());
        h_A[b* n_inputs + i]= 0.5;
      }
    }

    // Allocate the device input vector A
    float *d_A = NULL;
    err = cudaMalloc((void **)&d_A, size);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_B = NULL;
    err = cudaMalloc((void **)&d_B, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_C = NULL;
    err = cudaMalloc((void **)&d_C, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    int *d_op_sel = NULL;
    err = cudaMalloc((void **)&d_op_sel, size_idx);

    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to allocate device vector A (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    // Copy the host input vectors A and B in host memory to the device input vectors in
    // device memory
    printf("Copy input data from the host memory to the CUDA device\n");
    err = cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector A from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_B, h_B, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector B from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_C, h_C, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    err = cudaMemcpy(d_op_sel, h_op_sel, size_idx, cudaMemcpyHostToDevice);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from host to device (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    // Launch the Vector Add CUDA Kernel
    int threadsPerBlock = 32;
    int blocksPerGrid= (batch_size + threadsPerBlock -1)/ threadsPerBlock;
    struct timeval t1, t2;

    // Perform Warmup
    ac<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, d_op_sel, n_inputs, n_arith, thresh, iter);
    // FInish execution of kernel
    cudaDeviceSynchronize();
    
    gettimeofday(&t1, 0);

    printf("CUDA kernel launch with %d blocks of %d threads\n", blocksPerGrid, threadsPerBlock);
    ac<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, d_op_sel, n_inputs, n_arith, thresh, iter);

    // FInish execution of kernel
    cudaDeviceSynchronize();
    gettimeofday(&t2, 0);
    
    double time = (1000000.0*(t2.tv_sec-t1.tv_sec) + t2.tv_usec-t1.tv_usec)/1000.0;
    
    printf("Time of kernel:  %3.4f ms \n", time);

    err = cudaGetLastError();
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to launch vectorAdd kernel (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }

    printf("Throughput: %.3f Gops/sec, Batch: %d, nIter: %d, n_arith: %d\n", (((1.0*batch_size*iter*n_arith))/time)/10E6, batch_size, iter, n_arith);

    // Copy the device result vector in device memory to the host result vector
    // in host memory.
    printf("Copy output data from the CUDA device to the host memory\n");
    err = cudaMemcpy(h_A, d_A, size, cudaMemcpyDeviceToHost);
    if (err != cudaSuccess)
    {
        fprintf(stderr, "Failed to copy vector C from device to host (error code %s)!\n", cudaGetErrorString(err));
        exit(EXIT_FAILURE);
    }
    
    //for (int i=0; i<numElements; i++) {
    for (int i=0; i<32; i++) {
      printf("%d : %f,", i, h_A[i*n_inputs]);
    }

    err = cudaFree(d_A);
    err = cudaFree(d_B);
    err = cudaFree(d_C);

    free(h_A);
    free(h_B);
    free(h_C);

    printf("Done!\n");
    return 0;
}
